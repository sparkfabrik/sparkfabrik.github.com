<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tech @ SparkFabrik</title>
    <link>http://sparkfabrik.github.io/post/</link>
    <description>Recent content in Posts on Tech @ SparkFabrik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@sparkfabrik.com (Sparkfabrik)</managingEditor>
    <webMaster>info@sparkfabrik.com (Sparkfabrik)</webMaster>
    <lastBuildDate>Tue, 29 Nov 2016 08:51:09 +0200</lastBuildDate>
    <atom:link href="http://sparkfabrik.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Trapped by an amend, saved by a reflog</title>
      <link>http://sparkfabrik.github.io/2016/11/29/trapped-by-amend-saved-by-reflog</link>
      <pubDate>Tue, 29 Nov 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/11/29/trapped-by-amend-saved-by-reflog</guid>
      <description>

&lt;p&gt;We use Git on a daily basis, and most of the time we always enter the same commands.
It can happen to found ourselves trapped by one of them, sometimes because we forgot a side-effect, other times because we confused the right option.
No need to worry though, since Git is equally able to put you in trouble and save your day with the same ease. So, let me tell you how I was hit by an &lt;code&gt;--amend&lt;/code&gt; during a commit and how I easily got out.&lt;/p&gt;

&lt;p&gt;Sometimes during the day, especially in the time right before lunch or leaving work, it&amp;rsquo;s possible to forget one the most important rules of the savvy developer: in the console, you can be quick with all the keys, but think twice before pressing &amp;ldquo;enter&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Sure, I managed to break that very rule some days ago. Luckily that was a chance to remind me how much powerful Git is and how sometimes the solutions to an apparently bad situation can be just a few commands away.&lt;/p&gt;

&lt;h2 id=&#34;the-amend-secret:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;The amend secret&lt;/h2&gt;

&lt;p&gt;As many of you probably know, the &lt;code&gt;git commit --amend&lt;/code&gt; command can be used to edit the message of the last commit in the history. This is one of the most common uses because - as developers - we are prone to typos and bad phrasing.
But the &lt;code&gt;--amend&lt;/code&gt; option can also be used to include &lt;em&gt;new code&lt;/em&gt; in the last commit.&lt;/p&gt;

&lt;p&gt;For example:
Let&amp;rsquo;s say you&amp;rsquo;ve just created a commit but you&amp;rsquo;ve also forgot to add a block comment to that very method you&amp;rsquo;ve written, and you don&amp;rsquo;t want to have another commit in the history, for various reasons. You have many choices at this point, including creating a new commit with the new lines and squash it with the previous one using the &lt;code&gt;git rebase&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;But you can also do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add new line and prepare them for the commit.
git add -p
# Amend the previous commit and add to it the staged modifications.
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A this point, you are asked to edit the previous commit message and the staged edits will be included in it. Useful, isnt&amp;rsquo;it?&lt;/p&gt;

&lt;h2 id=&#34;the-side-effect:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;The side effect&lt;/h2&gt;

&lt;p&gt;This little trick can be very handy in many situations, but it can also be a very sharp double-edged blade because, as you probably have guessed, you can use the amend on &lt;em&gt;any&lt;/em&gt; commit including, for example, a &lt;em&gt;merge commit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, here&amp;rsquo;s a possible sequence of commands that could generate a bad situation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# You add some modifications.
git add -p
# Then create a new commit
git commit -m &#39;Added new public method&#39;
# Then merge the last develop in your working branch
git fetch --all
git merge origin/develop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far the history of your branch could be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ git log --oneline

b1748d6 Merge remote-tracking branch &#39;origin/develop&#39; into feature/my_branch
a69fa15 Added new public method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you accidendally amend the next modifications instead of creating a new commit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Write a block comment for your new method and stage the new modifcations.
git add -p
# But instead of creating a new commit, you use the --amend option.
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the history will be almost the same, but the hash of the &lt;em&gt;merge commit&lt;/em&gt; will be different and that commmit will include your new block comment too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ git log --oneline

f5a5377 Merge remote-tracking branch &#39;origin/develop&#39; into feature/my_branch
a69fa15 Added new public method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s bad.&lt;/p&gt;

&lt;h2 id=&#34;the-git-reflog-solution:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;The git reflog solution&lt;/h2&gt;

&lt;p&gt;Because you want to restore the situation, before the amend  you can decide to use the &lt;code&gt;git reflog&lt;/code&gt; in combination with a &lt;code&gt;git reset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;git reflog&lt;/code&gt; command will prompt the history of the last commands you&amp;rsquo;ve entered.
The output will look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ git reflog

f5a5377 HEAD@{0}: commit (amend): Merge remote-tracking branch &#39;origin/develop&#39; into feature/my_branch
b1748d6 HEAD@{1}: merge origin/develop: Merge made by the &#39;recursive&#39; strategy.
a69fa15 HEAD@{2}: Added new public method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see you have a separate line for each commit action made, and it is pretty easy to solve the problem. Having the &lt;strong&gt;HEAD@{1}&lt;/strong&gt; hash now you can go back there, removing &lt;em&gt;de facto&lt;/em&gt; the last command from the history.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# We go back in the history up to the merge commit.
git reset --soft b1748d6
# At this point we&#39;ll have all the edits that we wrongly added to the merge commit already staged and ready to be added to a new commit.
git commit -m &#39;Added new block comment&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Here it is. One simple problem and one simple solution.
What I learned when I&amp;rsquo;ve found myself in a situation like this one is that your understanding of Git can really make the difference sometimes. Knowing the commands main purpose is as important as having a basic undestanding of their possibile secondary uses and side effects, but it is also crucial to remember that Git itself provides the tools to investigate and solve critical situations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wait a minute, Doc</title>
      <link>http://sparkfabrik.github.io/2016/06/14/wait-a-minute-doc</link>
      <pubDate>Tue, 14 Jun 2016 11:02:30 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/06/14/wait-a-minute-doc</guid>
      <description>

&lt;p&gt;Only the brave can be web developers today.
I really think if you are a web developer, nothing can scare the crap out of you! Nothing but writing documentation for your code&amp;hellip;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s face it, we &lt;strong&gt;hate&lt;/strong&gt; writing docs! In fact developers came up with a lot of clever tools to automatize code documentation, and they work well and reliably to date.
But there are cases where you have to jot down a guide to first build, or a reference page with best practices. Odds are good you end up using a project wiki, or if you are less fortunate you are juggling through a bunch of never-to-be-found Google Documents.&lt;/p&gt;

&lt;p&gt;Well, look no further: here we have a recipe to soothe your pain!&lt;br /&gt;
It may not be a panacea but surely it will streamline the process of documentation maintenance and availability.&lt;/p&gt;

&lt;p&gt;Say welcome to Raneto!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;hey-doc-this-is-heavy:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Hey doc, this is heavy!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-thisisheavy-meme.jpg&#34; alt=&#34;This is heavy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start listing our pains with project documentation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Manage documentation requires a context switch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you live in a tmux-powered kickin-ass hyper-hipster hyphens-overloaded console environment the more annoying thing to do is switch to a browser, navigate to your tracker&amp;rsquo;s wiki, make your way to the right page and edit the stuff. It is discomfortable and a great excuse for procrastination.
This is in my opinion the first reason why documentation goes obsolete from day 1.&lt;/p&gt;

&lt;p&gt;Add problems like write permissions on knowledge-base tools, another approval workflow to manage, possible policies-hell, etc. and you&amp;rsquo;ll flip your table at the sole idea!&lt;/p&gt;

&lt;p&gt;Surely, having a more straighforward path from your working environment to your documentation helps you keep it up to date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Documentation is hard to evolve with your project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When your team is involved on a medium-to-long term project, you really need to keep track of changes. But changes don&amp;rsquo;t always happen in line.
Wild branching, forking and bisecting happens in your codebase as experimental feature get thrown in and out, or the codebase is updated to work on the next &lt;em&gt;&amp;lt;your technology of choice&amp;gt;&lt;/em&gt; release. This means documentation should ideally follow along with your codebase.&lt;/p&gt;

&lt;p&gt;For example, a three-years long project of ours was recently moved from an &amp;ldquo;old fashioned&amp;rdquo; PHP5 based environment to a shiny new docker-based, PHP7 one. The process took weeks and almost totally changed the way we perform builds, not to mention how local development environment works.
Maintaining two pages on a wiki, with almost the same title, and drop a note somewhere to explain which page to read is ugly as a single-headed monkey. It introduces throw-away information, generates confusion and is hard to read for both experienced teammates and newcomers.&lt;/p&gt;

&lt;p&gt;This leads to the next point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. When documentation is hard to find or unreliable, people stop reaching for it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Natural tendency towards the path of least resistence makes people want to &lt;del&gt;stre&lt;/del&gt; ping one another on Slack instead of searching for information in the docs, simply because it is perceived as quicker, easier and (this is bad) more reliable.
This in turn makes some people the SPOF for important information, which is never persisted anywhere and when it does, it&amp;rsquo;s left alone and quickly goes out of date.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we had a bunch of problems to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Streamline the process of writing and maintaining documentation by devs point of view&lt;/li&gt;
&lt;li&gt;Make documentation accessible, reliable and relevant to the project state&lt;/li&gt;
&lt;li&gt;Allow anybody to contribute to documentation&lt;/li&gt;
&lt;li&gt;Avoid &lt;em&gt;moar policies&lt;/em&gt; for contributions&lt;/li&gt;
&lt;li&gt;Be cool (it&amp;rsquo;s always important to be cool if you want to write an article on what you are doing) (or if you want to play metal :D )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now what?&lt;/p&gt;

&lt;h3 id=&#34;back-to-the-future:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Back to the future&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-gigawatts-meme.jpg&#34; alt=&#34;I got gigawatts&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And it happened.
A customer asked our CTO to write guidelines on how to ensure maximum performance on the project before committing new contributions.&lt;/p&gt;

&lt;p&gt;Now, if you ask a developer to write documentation you are making her a major disservice, but if you ask a CTO you&amp;rsquo;ll end up causing yourself permanent damage!
Paolo decided to avoid physical confrontation and went the simple way: he dropped a markdown file with instructions in the project repository, in a folder called &lt;code&gt;documentation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;He didn&amp;rsquo;t even thought about opening the wiki (which was covered in cobwebs anyway). He did what was natural and obvious to him. And we ended up with a file we could read, nicely formatted, on our Gitlab instance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey, not bad!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was already in search for an easy to maintain knowledge-base platform and I thought in 2016, when static site generator are all-the-rage and everybody drools on going down-to-metal, maybe someone would have had addressed the problem, building a simple markdown-powered knowledge based generator.&lt;/p&gt;

&lt;p&gt;And guess what?! &lt;a href=&#34;https://gilbert.pellegrom.me&#34;&gt;Someone&lt;/a&gt; &lt;a href=&#34;https://github.com/gilbitron/Ranet&#34;&gt;did&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A bit of research and I stumbled on &lt;a href=&#34;http://raneto.com&#34;&gt;Raneto&lt;/a&gt;, a node-based, markdown-powered knowledge base site generator. Not static, but still. :)&lt;/p&gt;

&lt;p&gt;Raneto actually has a lot of selling points that made me fall in love:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s easy to install and use.&lt;/li&gt;
&lt;li&gt;It has no database, or if you prefer, your flat markdown files are it&amp;rsquo;s database.&lt;/li&gt;
&lt;li&gt;It is fast and pretty lightweight, with the whole stack sucking around 65MB of RAM.&lt;/li&gt;
&lt;li&gt;It renders to a pleasant default template, which can be themed with &lt;a href=&#34;https://mustache.github.io&#34;&gt;Mustache&lt;/a&gt;, highlights your code, support GitHub-flavored MarkDown and is also responsive.&lt;/li&gt;
&lt;li&gt;It allows you to perform full text search in the doc.&lt;/li&gt;
&lt;li&gt;Its index and documentation navigation are directory&amp;amp;slug-driven: you don&amp;rsquo;t have to build a menu, just arrange your files in folders &lt;code&gt;to/reflect/doc-sections&lt;/code&gt; and name dirs and files &lt;code&gt;using-a-slug-to-make-them-readable&lt;/code&gt; and you&amp;rsquo;ll end up with human readable version of menu links and titles.&lt;/li&gt;
&lt;li&gt;The whole doc reads in 5 minutes. From a smartphone. On a crowded train. I did.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yay! Now our CTO documentation looks really cute, with unicorns, rainbows and all!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Going down-to-metal leapfrogged us to the future! Yay!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s like flying-skates cool! Almost&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;great-dock:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Great Dock!!!&lt;/h3&gt;

&lt;p&gt;OK, we got a great service to hadle our CTO-proof documentation.
But no &lt;del&gt;hipst&lt;/del&gt; modern CTO would ever accept another dependency in his stack.&lt;/p&gt;

&lt;p&gt;The idea here is to have a folder in your project repository to hold all the relevant documentation so that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anybody can contribute with the same policies they use for code (do you review MRs? Use git-flow? Commit directly on master? No, seriously&amp;hellip; don&amp;rsquo;t do this, even at home!)&lt;/li&gt;
&lt;li&gt;Different branches or forks can have different version of the documentation&lt;/li&gt;
&lt;li&gt;Navigating the source code from Gitlab/GitHub/Bitbucket/Whatever allows you to read the documentation files anyway (a nice addition)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We miss a way to make Raneto available in a snap!
The solution is obviously to dockerize the whole thing out. And manage the container with docker-compose for good measure, of course!&lt;/p&gt;

&lt;p&gt;So &lt;a href=&#34;https://hub.docker.com/r/sparkfabrik/docker-node-raneto&#34;&gt;I prepared a container&lt;/a&gt; which mounts the local folder in a volume and exposes the content via Raneto, on port 80 for easier access!
The documentation is pretty straightforward (eh! ^_^&amp;lsquo;) but if you want to play with it right now, follow these steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a folder structure like this:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p documentation/docs
mkdir -p documentation/files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first directory will hold your markdown files. The second one will be mounted to the public asset folder, so you can have images or attachments in your documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write some example doc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can drop the following in &lt;code&gt;documentation/docs/up-to-88.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a silly example page with **markdown** syntax!

_And here is an even more silly meme_
![88mph](files/silly-meme.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then put one of the silly memes on this page in &lt;code&gt;files&lt;/code&gt; directory (of course name it &lt;code&gt;silly-meme.png&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Done?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Launch Raneto in its container&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -p 80:80 -v &amp;lt;/full/path/to/your/content&amp;gt;:/srv/raneto/content -d sparkfabrik/raneto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and enjoy your documentation at &lt;a href=&#34;http://localhost:80&#34;&gt;http://localhost:80&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes! It is THAT simple! :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-wasfast-meme.jpg&#34; alt=&#34;Whew... this was fast&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;hey-you-get-your-damn-hands-off-it:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Hey, you! Get your damn hands off it!&lt;/h3&gt;

&lt;p&gt;But why, oh why would you want to launch a container by hand when you can do it with &lt;a href=&#34;https://docs.docker.com/compose&#34;&gt;docker-compose&lt;/a&gt;?&lt;br /&gt;
Actually there are a lot of potential reasons, but leave me my drama and follow along: to make your documentation quickly accessible in your project the best thing to do is to install &lt;a href=&#34;https://github.com/tonistiigi/dnsdock&#34;&gt;dnsdock&lt;/a&gt; (&lt;a href=&#34;http://blog.brunopaz.net/easy-discover-your-docker-containers-with-dnsdock/&#34;&gt;this guide&lt;/a&gt; may come in handy) and register a URL for your project documentation.&lt;/p&gt;

&lt;p&gt;You can either create a new &lt;code&gt;docker-compose.yml&lt;/code&gt; file in your project root with the following content, or add these lines to the one you have in place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;documentation:
  image: sparkfabrik/docker-node-raneto:0.9.0
  environment:
    - DNSDOCK_ALIAS=docs.whatever.localdomain.loc
  volumes:
    - ./documentation/docs:/srv/raneto/content
    - ./documentation/files:/srv/raneto/themes/default/public/files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once done, and given your file is in the same directory than your &lt;code&gt;documentation&lt;/code&gt; folder, just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to enjoy your documentation at &lt;a href=&#34;http://docs.whatever.localdomain.loc&#34;&gt;http://docs.whatever.localdomain.loc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-what-the-hell-is-a-gigawatt:cb7242210f870347cebbc9c2f1daff46&#34;&gt;What-what the hell is a gigawatt?&lt;/h3&gt;

&lt;p&gt;Want to go the easy way?
You can test the all of the above cloning this repo: &lt;a href=&#34;https://github.com/stickgrinder/spark-docker-raneto-demo&#34;&gt;https://github.com/stickgrinder/spark-docker-raneto-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-calculations-meme.jpg&#34; alt=&#34;You did almost nothing...&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Mind that you have to have dnsdock in place &lt;em&gt;OR&lt;/em&gt; create an entry in the hostfile to resolve &lt;code&gt;docs.demo.sparkfabrik.loc&lt;/code&gt; to the IP of the container started by docker-compose.&lt;/p&gt;

&lt;h3 id=&#34;give-me-a-milk-chocolate:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Give me a milk&amp;hellip; Chocolate!&lt;/h3&gt;

&lt;p&gt;If you now feel like a real documentation badass, pat yourself a shoulder: &lt;strong&gt;you are!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This simple container still has a long way to go: for example public assets would be better served in a folder outside the default theme. Even better, it can support custom theme in the project folder.
But you surely have more clever ideas so please, find the container definition &lt;a href=&#34;https://github.com/sparkfabrik/docker-node-raneto&#34;&gt;here&lt;/a&gt;, fork it and adapt it to your needs and workflow!&lt;/p&gt;

&lt;p&gt;And don&amp;rsquo;t forget to send PRs in! :)&lt;/p&gt;

&lt;p&gt;Happy doc(k)ing everybody!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE - 20 July 2016&lt;/strong&gt;:&lt;br /&gt;
My colleague Stefano pointed me out to &lt;a href=&#34;https://thinkshout.com/blog/2016/07/the-hidden-power-of-documentation/?utm_source=The+Weekly+Drop&amp;amp;utm_medium=email&amp;amp;utm_campaign=The_Weekly_Drop_Issue_248_07_14_2016&#34;&gt;this great complementary article&lt;/a&gt; by Joe Komenda, who provided valuable insight on how to organize your docs so that they actually make a difference. In the article Joe also provide a couple of great markdown templates to start with.&lt;br /&gt;
I found them a perfect match for our Raneto container and they really helps kickstart great project documentation.&lt;br /&gt;
My advice is to have them in your project launch checklist right now! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown bag happy-hour, May 4th 2016</title>
      <link>http://sparkfabrik.github.io/2016/05/10/brown-bag-happy-hour-2016-05-04</link>
      <pubDate>Tue, 10 May 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/05/10/brown-bag-happy-hour-2016-05-04</guid>
      <description>

&lt;p&gt;News about Drupal, Backtrac Casestudy, Drupal Developer Days and PHP for this new appointment of BBH!&lt;/p&gt;

&lt;h1 id=&#34;weekly-news:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;Weekly News&lt;/h1&gt;

&lt;h3 id=&#34;a-new-design-system-for-drupal-org:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;A new design system for Drupal.org&lt;/h3&gt;

&lt;p&gt;A new visual system for Drupal.org is expected for this year.
The goal is &amp;ldquo;Update Drupal.org to reflect the flexibility, modernity, and community of Drupal itself&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;See all details at &lt;a href=&#34;https://www.drupal.org/drupalorg/blog/a-new-design-system&#34;&gt;drupal.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;drupal-developer-days-keynotes:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;Drupal Developer Days keynotes&lt;/h3&gt;

&lt;p&gt;Drupal Developer Days, the developer-oriented international event that offers opportunities for learning and actually using Drupal, comes to Italy for the very first time in 2016. It will be held in Milan, June 21-26.&lt;/p&gt;

&lt;p&gt;Annunced keynotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bojan Živanović - Making a Drupal shaped dent in the universe&lt;/li&gt;
&lt;li&gt;Alessia Rullo - Aesthetics of interaction: an update&lt;/li&gt;
&lt;li&gt;Jessica Rose - Automating Access to Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See all details at &lt;a href=&#34;http://milan2016.drupaldays.org/program/keynotes&#34;&gt;drupaldays.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;backtrac-casestudy:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;Backtrac Casestudy&lt;/h3&gt;

&lt;p&gt;BackTrac is visual regression testing tool, the case study explain a real life example, Drupal.org.&lt;/p&gt;

&lt;p&gt;See all detail at &lt;a href=&#34;https://backtrac.io/blog/case-study-drupalorg&#34;&gt;backtrac.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;php-nette:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;PHP, Nette&lt;/h3&gt;

&lt;p&gt;According to the survey result at &lt;a href=&#34;http;//http://www.sitepoint.com&#34;&gt;sitepoint&lt;/a&gt; SitePoint statistics , it ranked number 3 in both “at Work” and “in Personal Projects”, just tailing the two giants: Laravel and Symfony2.
Nette Framework is an Open Source framework for creating web applications in PHP&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full PHP 7 compatibility&lt;/li&gt;
&lt;li&gt;Revolutionary technology that eliminates security holes and their misuse, such as XSS, CSRF, session hijacking, session fixation, etc&lt;/li&gt;
&lt;li&gt;Tracy debug tools, which will help you discover all bugs in timely fashion.&lt;/li&gt;
&lt;li&gt;Thoughtful and pure object-oriented design using the new features in PHP 5, components and event driven modeling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See all detail at &lt;a href=&#34;https://nette.org&#34;&gt;nette.org&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;em&gt;BBH (Brown bag happy-hour)&lt;/em&gt; it&amp;rsquo;s a &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; regular activity where we share discoveries and techniques with each other and discuss the last two week tech and innovation world novelties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown bag happy-hour, April 19th 2016</title>
      <link>http://sparkfabrik.github.io/2016/04/19/brown-bag-happy-hour</link>
      <pubDate>Tue, 19 Apr 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/19/brown-bag-happy-hour</guid>
      <description>

&lt;p&gt;News about Drupal, Telegram and Youtube for this new appointment of BBH!&lt;/p&gt;

&lt;h1 id=&#34;weekly-news:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Weekly News&lt;/h1&gt;

&lt;p&gt;Drupal, Telegram API and YouTube for this new appointment of BBH. By Enrico Sato.&lt;/p&gt;

&lt;h3 id=&#34;drupal-8-1-0-is-now-available:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Drupal 8.1.0 is now available&lt;/h3&gt;

&lt;p&gt;The testing for the &lt;a href=&#34;https://www.drupal.org/drupal-8.1.0-rc1&#34;&gt;first release candidate&lt;/a&gt; is concluded and now the drupal community published the first minor release of Drupal 8.1.0 version.&lt;/p&gt;

&lt;p&gt;What is new?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Experimental UI for migrations from older Drupal versions;&lt;/li&gt;
&lt;li&gt;Integration with BigPipe for performance of site;&lt;/li&gt;
&lt;li&gt;CKEditor WYSIWYG spellchecking and language button;&lt;/li&gt;
&lt;li&gt;Rendered entities in Views fields;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See all details at &lt;a href=&#34;https://www.drupal.org/blog/drupal-8-1-0&#34;&gt;drupal.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update from 8.0.6 to 8.1.0 use the update procedure (it is the same as updating from 8.0.5 to 8.0.6). Drupal community recommends to test the update carefully before updating your production site.&lt;/p&gt;

&lt;h3 id=&#34;a-drupal-distribution-for-publishers-thunder:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;A drupal distribution for publishers: Thunder&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_thunder.jpg&#34; alt=&#34;Thunder distribution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Media group &lt;a href=&#34;http://www.hubert-burda-media.com/&#34;&gt;Huber Burda Media&lt;/a&gt; released its Drupal 8 distribution, &lt;a href=&#34;http://www.thunder.org/&#34;&gt;Thunder&lt;/a&gt;, that includes contrib and custom modules selected for publisher’s world. This distribution is born thanks to a strong collaboration between publishers and developers and the final product shows a particularly care to UX that soothes the publisher’s workflow.
And, last but not least, it is built on Drupal 8!&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://www.drupal.org/project/thunder&#34;&gt;download Thunder&lt;/a&gt; or &lt;a href=&#34;https://simplytest.me/project/thunder&#34;&gt;test it out&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;telegram-bot-api-2-0:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Telegram Bot API 2.0&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_telegram.jpg&#34; alt=&#34;Telegram Bot API 2.0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One year after the the first release of its Bot Platform, Telegram announces new tools for it: Bot Platform 2.0&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today we are giving bot developers a whole new dimension with Bots 2.0: inline keyboards, callback and URL buttons, location permissions and on-the-fly message editing. The new bots can also generate any type of content for you to share with friends, including documents, MP3s, videos, stickers, animations and contacts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Telegram have already released some Bot’s example to try out the new capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/music&#34;&gt;@music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/youtube&#34;&gt;@youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/foursquare&#34;&gt;@foursquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/sticker&#34;&gt;@sticker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(you must update your app to the last version).&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://core.telegram.org/bots/2-0-intro&#34;&gt;Documentation about Telegram Bot API 2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, if you are not a coder and you would like to test the potential of Telegram’s Bot, you can start with &lt;a href=&#34;http://chatfuel.com&#34;&gt;Chatfuel&lt;/a&gt; and the possible integration with &lt;a href=&#34;https://zapier.com/zapbook/chatfuel&#34;&gt;Zapier&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;youtube-introduces-360-degree-live-streaming-and-spatial-audio:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Youtube introduces 360-degree live streaming and spatial audio&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/DvouWzN1dRdQtjATPUAXVkH2zcxEQpPdKlnvsY7i6aTxIl8NbcpUAJncUukeTb4igklbRWrleCFksDDVojv1GN6AiZk4v_2opy8cGX-C7hO2c0dgTx52gUQBJ_hc_5GBEMKAbkpb&#34; alt=&#34;Youtube 360-degree live streaming&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the launch of support for 360 degrees videos, Youtube makes another step towards virtual reality: now its platform allows for streaming with 360 degree technology and spacial audio effects&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just as watching a concert in 360 degrees can give you an unmatched immersive experience, spatial audio allows you to listen along as you do in real life, where depth, distance and intensity all play a role.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Youtube works with companies like &lt;strong&gt;VideoStitch&lt;/strong&gt; and &lt;strong&gt;Two Big Ears&lt;/strong&gt; to make their software compatible with 360-degree live streams or spatial audio. 360-degree live streaming and spatial audio technologies are avaliable at all &lt;a href=&#34;https://www.youtube.com/yt/space/&#34;&gt;YouTube Space locations around the globe&lt;/a&gt;, for people who wants to try this experience.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;em&gt;BBH (Brown bag happy-hour)&lt;/em&gt; it&amp;rsquo;s a &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; regular activity where we share discoveries and techniques with each other and discuss the last two week tech and innovation world novelties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drush Make overwrites your custom .gitignore file</title>
      <link>http://sparkfabrik.github.io/2016/04/08/drush-make-gitignore</link>
      <pubDate>Fri, 08 Apr 2016 01:00:00 -0400</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/08/drush-make-gitignore</guid>
      <description>

&lt;h1 id=&#34;managing-a-customized-gitignore-file-across-drush-make-builds:a0167166354a1579d70789b020f359e4&#34;&gt;Managing a customized .gitignore file across drush make builds&lt;/h1&gt;

&lt;h2 id=&#34;the-problem:a0167166354a1579d70789b020f359e4&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/drush-ops/drush&#34;&gt;Drush&lt;/a&gt; 8&lt;/strong&gt; overwrites the .gitignore file after a successful makefile execution.&lt;/p&gt;

&lt;p&gt;This affects complex projects where multiple dependency sources are present, and where other reasons might require a significant override of the &lt;strong&gt;.gitignore&lt;/strong&gt; file provided by Drupal, which ends up diffed, causing &lt;code&gt;git status&lt;/code&gt; to produce an ugly output, until the committed .gitignore is restored.&lt;/p&gt;

&lt;h2 id=&#34;origin-of-the-problem:a0167166354a1579d70789b020f359e4&#34;&gt;Origin of the problem&lt;/h2&gt;

&lt;p&gt;In recent upgrades, the &lt;code&gt;--overwrite&lt;/code&gt; option has been added to Drush in order to force the overwrite of existing folders (the command docs don&amp;rsquo;t  mention files, althought some file reference is present in the code comments), while the default behavior is to &lt;em&gt;merge&lt;/em&gt;, which means keeping existing folder content. This option has only an impact on &lt;strong&gt;directories&lt;/strong&gt; inside the project&amp;rsquo;s root and doesn&amp;rsquo;t affect the files in the root.&lt;/p&gt;

&lt;h2 id=&#34;how-the-problem-was-investigated:a0167166354a1579d70789b020f359e4&#34;&gt;How the problem was investigated&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I created a couple of docker containers based on &lt;a href=&#34;https://hub.docker.com/r/sparkfabrik/docker-php-base-image/&#34;&gt;SparkFabrik base PHP image&lt;/a&gt; well suitable for PHP/Drupal development.&lt;/li&gt;
&lt;li&gt;In both containers, I replaced the default Drush version (8.0.5 installed with phar) so that I could debug and alter the code on the fly&lt;/li&gt;
&lt;li&gt;In a container I installed version 6.7.0 (downloading the &lt;a href=&#34;https://github.com/drush-ops/drush/releases/tag/6.7.0&#34;&gt;release tarball&lt;/a&gt;) in the other I installed the &amp;ldquo;source&amp;rdquo; version of Drush 8.0.5 (&lt;a href=&#34;http://docs.drush.org/en/master/install-alternative/&#34;&gt;via composer&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;I created a small repository containing a .gitignore slightly different than Drupal&amp;rsquo;s one, and a makefile with some dependencies&lt;/li&gt;
&lt;li&gt;Then I executed &lt;code&gt;drush make&lt;/code&gt; in both containers, with the &lt;code&gt;--debug&lt;/code&gt; option that enhance output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;execution-flow:a0167166354a1579d70789b020f359e4&#34;&gt;Execution flow&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;During makefile processing, files are downloaded in a temp directory and only at the end they are copied to the final destination by the function &lt;a href=&#34;https://github.com/drush-ops/drush/blob/8.0.5/commands/make/make.drush.inc#L739&#34;&gt;&lt;code&gt;make_move_build&lt;/code&gt;&lt;/a&gt;. The process is basically a recursive copy of the elements found in the root of the downloaded codebase.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_move_build&lt;/code&gt; is also responsible for reading the &lt;code&gt;--overwrite&lt;/code&gt; option and pass a consequent value to the function in charge of copying both files and directories: &lt;a href=&#34;https://github.com/drush-ops/drush/blob/8.0.5/includes/filesystem.inc#L215&#34;&gt;&lt;code&gt;drush_copy_dir&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Before calling &lt;code&gt;drush_copy_dir&lt;/code&gt;, &lt;code&gt;make_move_build&lt;/code&gt; loops through root-level items and treats directories differently (see &lt;a href=&#34;https://github.com/drush-ops/drush/commit/d10826132d72f8dabc10a396efe43319d4a5b316&#34;&gt;https://github.com/drush-ops/drush/commit/d10826132d72f8dabc10a396efe43319d4a5b316&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;drush_copy_dir&lt;/code&gt; the value passed when &lt;code&gt;--overwrite&lt;/code&gt; is set is only used to create a log entry (&lt;a href=&#34;https://github.com/drush-ops/drush/blob/6.7.0/includes/filesystem.inc#L224&#34;&gt;https://github.com/drush-ops/drush/blob/6.7.0/includes/filesystem.inc#L224&lt;/a&gt;), but not in order to avoid overwriting files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;workaround-and-solutions:a0167166354a1579d70789b020f359e4&#34;&gt;Workaround and solutions&lt;/h2&gt;

&lt;p&gt;As a workaround, we set the build system (we&amp;rsquo;re currently using &lt;a href=&#34;https://www.phing.info/&#34;&gt;Phing&lt;/a&gt;) to execute a &lt;code&gt;git checkout&lt;/code&gt; of the committed version of .gitignore.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;real&lt;/em&gt; solution might consist in applying the &lt;code&gt;--override&lt;/code&gt; option (or lack of) also for root-level files, but I doubt this was intended by drush contributors, until now. In the following links, you can read a handful of relevant issues, for reference.&lt;/p&gt;

&lt;h2 id=&#34;links:a0167166354a1579d70789b020f359e4&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;This was the issue that originated the change from the previous behavior: &lt;a href=&#34;https://github.com/drush-ops/drush/pull/1450&#34;&gt;https://github.com/drush-ops/drush/pull/1450&lt;/a&gt; (commit &lt;a href=&#34;https://github.com/drush-ops/drush/pull/1450/commits/d10826132d72f8dabc10a396efe43319d4a5b316&#34;&gt;https://github.com/drush-ops/drush/pull/1450/commits/d10826132d72f8dabc10a396efe43319d4a5b316&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Other issues discussing the same subject:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drush-ops/drush/issues/1468&#34;&gt;https://github.com/drush-ops/drush/issues/1468&lt;/a&gt; &amp;ldquo;drush make does not overwrite root core files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NuCivic/dkan/issues/824&#34;&gt;https://github.com/NuCivic/dkan/issues/824&lt;/a&gt; &amp;ldquo;Move dkan modules downloaded via drush make to their own folder&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drush-ops/drush/issues/1269&#34;&gt;https://github.com/drush-ops/drush/issues/1269&lt;/a&gt; &amp;ldquo;drush make &lt;code&gt;--overwrite&lt;/code&gt; should respect &lt;code&gt;--projects=&lt;/code&gt;?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Brown bag happy-hour, April 5th 2016</title>
      <link>http://sparkfabrik.github.io/2016/04/06/brown-bag-happy-hour</link>
      <pubDate>Wed, 06 Apr 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/06/brown-bag-happy-hour</guid>
      <description>

&lt;p&gt;In the first BBH of spring 2016 Marcello Testi discussed about Drush Make related issues within Drush8, and Paolo Mainardi introduced the Hugo static site generator to the team in order to kickstart the &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; Tech Blog. We also talked a little about design thanks to our weekly news digest.&lt;/p&gt;

&lt;h1 id=&#34;weekly-news:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Weekly News&lt;/h1&gt;

&lt;p&gt;This week we discussed mainly design-related news, brought by Marcello Gorla.&lt;/p&gt;

&lt;h3 id=&#34;adobe-xd:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Adobe XD&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_adobexd.jpg&#34; alt=&#34;Adobe XD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Originally know as “Project Comet&amp;rdquo;, Adobe has released the preview of &lt;a href=&#34;http://blogs.adobe.com/creativecloud/introducing-adobe-experience-design-cc-preview/&#34;&gt;Adobe XD&lt;/a&gt;, it&amp;rsquo;s own tool intended for design and prototyping of user experience projects. The tool it&amp;rsquo;s an early stage release that still does not offer a full stack of features as we are used to with more advanced (and mature) softwares like Sketch or Adobe Photoshop, but there&amp;rsquo;s a &lt;a href=&#34;https://www.youtube.com/playlist?list=PLD8AMy73ZVxXvBQcZAnOcu57JCFxLi7bQ&#34;&gt;lot of stuff moving on&lt;/a&gt; and we think it&amp;rsquo;s worth trying.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/user-experience-design-1/first-impressions-with-adobe-experience-design-107904b5efbe#.25cvqr3ys&#34;&gt;Some opinions&lt;/a&gt; of course have been &lt;a href=&#34;http://techcrunch.com/2016/03/14/adobe-launches-experience-design-cc-a-new-tool-for-ux-designers/&#34;&gt;already popped out&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;frog-will-have-no-more-cco:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Frog will have no more CCO&lt;/h3&gt;

&lt;p&gt;After the departure of Hans Neubert, the international design firm &lt;a href=&#34;http://www.frogdesign.com/&#34;&gt;Frog&lt;/a&gt; recently decided &lt;a href=&#34;http://designmind.frogdesign.com/2016/03/evolving-creative-leadership-at-frog/&#34;&gt;not to replace it&amp;rsquo;s Chief Creative Officer with a new one&lt;/a&gt;, implementing a more agile structure with many Creative Officers around the world leading the single design teams. From a wider perspective, this event has an interesting impact.  A &lt;a href=&#34;http://www.fastcodesign.com/3058517/frog-will-have-no-more-chief-creative-officers&#34; title=&#34;Fast Co Design&#34;&gt;Fast Co Design&lt;/a&gt; article made a good point over this, trying to consider what is happening to the design consultancies and firms and to the field in general.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While design is more in demand than ever, the business of design consultancies has been in flux. Mega business consultants Accenture and IBM have each been making $100 million-plus bets on increasing their design fluency. Meanwhile, design firms ranging from Lunar to Ideo have reassessed their business strategies, and firms like Yves Behar&amp;rsquo;s Fuseproject have sold outright to foreign investors.
(Via &lt;a href=&#34;http://www.fastcodesign.com/3058517/frog-will-have-no-more-chief-creative-officers&#34; title=&#34;Fast Co Design&#34;&gt;Fast Co Design&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;olo-reached-founding-goal:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;OLO reached founding goal&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_olo.jpg&#34; alt=&#34;Adobe XD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Italian Kickstarter project &lt;a href=&#34;https://www.kickstarter.com/projects/olo3d/olo-the-first-ever-smartphone-3d-printer&#34;&gt;Olo&lt;/a&gt;, a 3D printer suited for the smartphones screen, has reached the funding goal and is running fast towards more stellar ones. Promising very good print resolution at low costs, this 3D printer could be a step forward to unchain the potential of personal projects prototyping and experimentation, but also a new frontier to many other unexplored fields like the home-productions of games.&lt;/p&gt;

&lt;h3 id=&#34;bonus-track-trend-to-follow-conversational-interfaces:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Bonus Track, trend to follow: conversational interfaces&lt;/h3&gt;

&lt;p&gt;Conversational Interfaces could be a good trend to follow, in our opinion. &lt;a href=&#34;http://www.fastcodesign.com/3058546/conversational-interfaces-explained?partner=rss&#34;&gt;Fast Co Design&lt;/a&gt; article on the topic points out how this pattern is quite interesting from a design point of view, because it elitminates a barrier, the UI, between the human and the machine languages. And this is particularly interesting considering the great hype that is surrounding the new wave of virtual reality interfaces, as the Oculus Rift, and the augmented reality in general.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So for most of computer history, we&amp;rsquo;ve communicated with computers essentially through Rosetta stones: We point at a symbol representing what we want a computer to do, and then it does it. For example, clicking an icon to open an app. With conversational interfaces, computers and humans can finally speak the same language without a Rosetta stone in between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On &lt;a href=&#34;https://medium.com/life-learning/the-future-of-cui-isn-t-conversational-fa3d9458c2b5&#34;&gt;Medium, Daniel Eckler&lt;/a&gt; wrote a very good article about how the design impacts this topic.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;em&gt;BBH (Brown bag happy-hour)&lt;/em&gt; it&amp;rsquo;s a &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; regular activity where we share discoveries and techniques with each other and discuss the last two week tech and innovation world novelties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A nerdy editorial experiment</title>
      <link>http://sparkfabrik.github.io/2016/04/05/a-nerdy-editorial-experiment</link>
      <pubDate>Tue, 05 Apr 2016 11:02:30 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/05/a-nerdy-editorial-experiment</guid>
      <description>

&lt;p&gt;OK, I admit there&amp;rsquo;s nothing more &lt;a href=&#34;http://sparkfabrik.github.io/img/hipster.png&#34;&gt;hipster&lt;/a&gt; than describe themselves as &lt;a href=&#34;http://sparkfabrik.github.io/img/nerd.png&#34;&gt;nerds&lt;/a&gt;. But I had to draw your attention somehow.&lt;/p&gt;

&lt;h3 id=&#34;would-you-ever-say-there-is-still-room-to-evolve-the-concept-of-blogging:aa8805dea155bcaea150b85f7d77fe7a&#34;&gt;Would you ever say there is still room to evolve the concept of blogging?&lt;/h3&gt;

&lt;p&gt;We do! But let&amp;rsquo;s start from the beginning.&lt;br /&gt;
One year from the company inception the time has come to blog about the technology we love. But we&amp;rsquo;d like to do this in  our commitment to transparency and openness.&lt;/p&gt;

&lt;p&gt;We thought about it a bit and came to the conclusion that &lt;strong&gt;we want to treat our knowledge as we treat our code&lt;/strong&gt;.&lt;br /&gt;
We like to share and we like to contribute. We also leverage what others share and love to receive contributions! While there are established practices to contribute code in 2016, that&amp;rsquo;s not the case for knowledge.&lt;/p&gt;

&lt;p&gt;Comments are not the right way to collect contributions. They allow for arguments to rise, require effort to integrate (and devs are often too busy to go back on an old post) and they are sooo Web 2.0.&lt;/p&gt;

&lt;p&gt;The solution was there to see: we just need to raise our hipster-o-meter level a bit! ;)&lt;br /&gt;
So start from a static site generator, which is all the rage now uh? Middleman can do but&amp;hellip; a Ruby oldie? Really?! Nah! Let&amp;rsquo;s go with (wait for it&amp;hellip;) &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; and throw &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; in the soup! And of course pack it all up with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, which is just what the doctor ordered. And of course, all should be &lt;a href=&#34;https://github.com/sparkfabrik/sparkfabrik.github.com&#34;&gt;available on GitHub&lt;/a&gt;, for the world to enjoy.&lt;/p&gt;

&lt;p&gt;Spice it up with &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Common Attribution-ShareAlike 4.0 license&lt;/a&gt; for contents (hey, it&amp;rsquo;s safe for work and &amp;ldquo;Free Culture approved!&amp;rdquo;) and a &lt;a href=&#34;http://choosealicense.com/licenses/gpl-3.0/&#34;&gt;GNU GPLv3 License&lt;/a&gt; for the rest of the code, and you&amp;rsquo;re done!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hipster-o-meter is on fire! &amp;lowast;_&amp;lowast;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But most of all, now everybody can fork the project on GitHub and do one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify and use it for her own purpose. It&amp;rsquo;s like Christmas, only everyday.&lt;/li&gt;
&lt;li&gt;Fix or update a post which is imprecise, outdated or unclear and send us a PR. Because we like our blog to be relevant and if it helped you somehow, you can give back (spoiler: you can credit yourself!).&lt;/li&gt;
&lt;li&gt;Write a guest article you&amp;rsquo;d like to see published and become a guest writer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure, we don&amp;rsquo;t expect to become the next interweb sensation overnight, but we are excited to test this new approach to social blogging out.&lt;/p&gt;

&lt;h3 id=&#34;ok-but-what-will-we-blog-about:aa8805dea155bcaea150b85f7d77fe7a&#34;&gt;OK, but what will we blog about?&lt;/h3&gt;

&lt;p&gt;Actually, the sky is the limit. Our business as a company is currently heavily based on Drupal, so we&amp;rsquo;ll naturally blog about Drupal and PHP in general. But we can&amp;rsquo;t keep our mind off novelties, innovations and &lt;em&gt;&amp;lowast;cough cough&amp;lowast;&lt;/em&gt; buzz &lt;em&gt;&amp;lowast;cough&amp;lowast;&lt;/em&gt; words.&lt;/p&gt;

&lt;p&gt;Se expect to find here dumps of our &lt;a href=&#34;http://humanresources.about.com/od/trainingtransfer/g/brown-bag-lunch.htm&#34;&gt;brown bag happy-hours&lt;/a&gt;, bits of hard-earned wisdom, analysis of our achievements, micro-tutorial, gotchas, weird discoveries and tools reviews. And don&amp;rsquo;t forget your contributions! :)&lt;/p&gt;

&lt;p&gt;The rule of thumb is: &lt;strong&gt;it has to do with technology, not philosophy or other blurbs!&lt;/strong&gt;&lt;br /&gt;
And sure, this post is an exception :P &lt;em&gt;er&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We really hope you&amp;rsquo;ll enjoy reading this blog as we enjoy writing it. And you are encouraged to treat it as the piece of software it is!&lt;br /&gt;
See you around! ;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>