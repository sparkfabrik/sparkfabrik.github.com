<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tech @ SparkFabrik</title>
    <link>http://sparkfabrik.github.io/post/</link>
    <description>Recent content in Posts on Tech @ SparkFabrik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@sparkfabrik.com (Sparkfabrik)</managingEditor>
    <webMaster>info@sparkfabrik.com (Sparkfabrik)</webMaster>
    <lastBuildDate>Sat, 04 Mar 2017 14:47:30 +0000</lastBuildDate>
    <atom:link href="http://sparkfabrik.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP REST tools showdown Series - Part 1: really RESTful APIs</title>
      <link>http://sparkfabrik.github.io/2017/03/04/php-rest-tools-showdown-series---part-1-really-restful-apis</link>
      <pubDate>Sat, 04 Mar 2017 14:47:30 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2017/03/04/php-rest-tools-showdown-series---part-1-really-restful-apis</guid>
      <description>

&lt;h2 id=&#34;introduction:7c8715bb330e5cc21c99494376b84830&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is the first of five posts in a series that want to tell you the story of my discovery journey through modern PHP tools to build a REST service layer.&lt;/p&gt;

&lt;p&gt;I have a sweet spot for REST and decoupled architectures, but working for a (mostly) Drupal company in the last (several) years, I had little occasion to put my head over the topic aside personal tinkering and small projects. Not to say that we didn&amp;rsquo;t produce REST APIs for our customers, but a real decoupled project was hard to be found.&lt;/p&gt;

&lt;p&gt;Then came Drupal 8, the first version of Drupal built from the ground-up to match enterprise use-cases: it brings many changes, embraces modern PHP to the core and is heavily oriented towards decoupled architectures. Actually, we can say &lt;strong&gt;headless Drupal&lt;/strong&gt; is quite a buzzword these days. All good news, but hey&amp;hellip; Drupal went finally PHP, which means that other modern PHP tools are finally within the reach of any &lt;em&gt;D8-savvy&lt;/em&gt; developer.&lt;br /&gt;
I dare to state that moving towards &lt;em&gt;SOLID&lt;/em&gt; PHP, Drupal made himself less of a &lt;em&gt;queen bee&lt;/em&gt;, diluting its ecosystem and exposing itself to direct confrontation with other PHP options.&lt;/p&gt;

&lt;p&gt;This may seem counterintuitive, but I consider this a great strength for Drupal in the first place: you don&amp;rsquo;t have to decide between &lt;strong&gt;making it &amp;ldquo;custom&amp;rdquo;&lt;/strong&gt; or &lt;strong&gt;making it with Drupal&lt;/strong&gt;: it will be easy to carry your business logic in and out of Drupal if the need be. So with a healthy and open spirit of confrontation, let&amp;rsquo;s dive into a journey among modern options to build REST APIs with PHP at the ides of March 2017.&lt;/p&gt;

&lt;h2 id=&#34;what-makes-an-api-really-rest:7c8715bb330e5cc21c99494376b84830&#34;&gt;What makes an API really REST&lt;/h2&gt;

&lt;p&gt;The interweb is flooded with articles about what a good API is or is not. Just try to google for &amp;ldquo;rest api best practice&amp;rdquo;.&lt;br /&gt;
Is one more opinion on the topic worth a blog-post? I don&amp;rsquo;t think so.&lt;/p&gt;

&lt;p&gt;Nonetheless my indiscriminately inflated and voluminous ego forces me to barf my opinion hereunder for good measure; here is &lt;strong&gt;my personal&lt;/strong&gt; take on what a good REST API is, in extreme synthesis. I&amp;rsquo;ll add some information on what we have to take carefully, pitfalls etc.&lt;/p&gt;

&lt;p&gt;I actually tackled into this topic yesterday, with a speech at Drupal Day 2017 in Rome - Italy, titled &lt;em&gt;REST in pieces&lt;/em&gt; (an atrocious and ruinous pun). This series aims to dig deeper into the topic so I&amp;rsquo;ll add a bit of information and (most important) a ton of lolcatz, sadly missing from my slides because time and blah blah.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/01-unacceptable-cat.png&#34; alt=&#34;This is unacceptable!&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;stick-s-10-laws-for-a-perfectly-rest-api:7c8715bb330e5cc21c99494376b84830&#34;&gt;Stick&amp;rsquo;s 10 laws for a perfectly REST API&lt;/h2&gt;

&lt;h3 id=&#34;1-uri-must-be-nouns-not-verbs:7c8715bb330e5cc21c99494376b84830&#34;&gt;1. URI must be nouns, not verbs&lt;/h3&gt;

&lt;p&gt;Verbs are &lt;strong&gt;already wired in HTTP&lt;/strong&gt; (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc) so it makes perfect sense, semantically speaking, to name your resources for what they are: resources.&lt;/p&gt;

&lt;p&gt;Apples are resources (to feed a population), money are resources (to make charity or business), time is a resource (to invest in learning REST, lol).&lt;br /&gt;
Navigate, press or play the guitar are not resources (whereas navigational skills, pressure and a guitar player can be - hey nouns!).&lt;/p&gt;

&lt;p&gt;With the next point, why this is important will become clear: naming resources by nouns will grant you APIs &lt;strong&gt;sensible semantics&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&amp;mdash; TABLE WITH EXAMPLES &amp;mdash;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;/cars&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;/getAllCars&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;/users&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;/userRemove&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;/books/{id}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;/books/{id}/remove&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;2-get-requests-must-never-alter-system-resource-state:7c8715bb330e5cc21c99494376b84830&#34;&gt;2. GET requests must never alter system/resource state&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Also known as&lt;/em&gt; &lt;strong&gt;HTTP has verbs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is where rule 1 above begins to click. HTTP has verbs &amp;ldquo;hard-wired&amp;rdquo; in the protocol. You can &lt;code&gt;GET&lt;/code&gt; a resource, &lt;code&gt;POST&lt;/code&gt; it, &lt;code&gt;DELETE&lt;/code&gt; it and so on. This basically means you can use HTTP syntax to write perfectly sensible expressions like &lt;code&gt;DELETE /books/123&lt;/code&gt;, which even my granny can understand (this is good, leave useless complexity to bollywood screenwriters so they can make their mildly Asperger heros hack an alien spaceship via consumer wifi).&lt;/p&gt;

&lt;p&gt;What if I ask you &amp;ldquo;Can you please get me a remove that stain from my shirt&amp;rdquo;? It would make little sense, specially compared to &amp;ldquo;Can you please remove that stain from my shirt?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s more: you don&amp;rsquo;t expect that collecting something will change its properties. Imagine a world where raising a cup of tea to your mouth change the content in olive oil. Or if buying a bulb means to automatically light it. Weird, huh?&lt;/p&gt;

&lt;p&gt;Writing RESTful expressions boils down mostly on leveraging &lt;em&gt;by-design&lt;/em&gt; HTTP expressive power.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/02-invariantstate-cat.png&#34; alt=&#34;GET ME OUT!&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;POST /cars&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;GET /addCar&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;DELETE /users/{uid}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;GET /userRemove&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;PUT /books/{id}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;GET /books/{id}/update&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-don-t-mix-plurals-and-singulars:7c8715bb330e5cc21c99494376b84830&#34;&gt;3. Don&amp;rsquo;t mix plurals and singulars&lt;/h3&gt;

&lt;p&gt;This is less of a rule and more of an advice. There is nothing inherently bad in pushing expressiveness towards natural language. Right? Meh&amp;hellip;&lt;/p&gt;

&lt;p&gt;I warn you against going too frenzy with expressiveness. It is important but can&amp;rsquo;t come at the cost of consistency. In other words, while it makes perfect sense, in fluent English to &lt;code&gt;GET /books&lt;/code&gt; (all of them) and &lt;code&gt;GET /book/123&lt;/code&gt; (only that one), the &lt;code&gt;/books&lt;/code&gt; &amp;rarr; &lt;code&gt;/book&lt;/code&gt; mapping creates an inconsistency among endpoints URIs.&lt;/p&gt;

&lt;p&gt;I hear you mumbling &amp;ldquo;why this hurts, anyway?&amp;rdquo;. First of all pluralization is not always straightforward, even in a language as consistent as English (if you don&amp;rsquo;t think it is, try with Italian), so for example you can incur in the &lt;code&gt;person&lt;/code&gt; &amp;rarr; &lt;code&gt;people&lt;/code&gt; case, which is a natural and fluent but hard to map inconsistency, compared to the books example.&lt;/p&gt;

&lt;p&gt;In addition, despite good inflectors are available for all popular languages, automating URI composition on the client side is more painful if you have to deal with the singular/plural/collective-nouns logic.&lt;/p&gt;

&lt;p&gt;Last but not least, it&amp;rsquo;s way easier to setup a consistent routing to your actions (think about your future you).&lt;/p&gt;

&lt;p&gt;In the end, sticking with singular or plural is the best way to avoid complications that add little value. Choose one and go with it. My personal choice is for plural.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Right&lt;/th&gt;
&lt;th&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /users&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /users&lt;/code&gt; (&lt;em&gt;Right but inconsistent with the following&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DELETE /users/{uid}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DELETE /user/{uid}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /users/{uid}/reviews&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /user/{uid}/reviews&lt;/code&gt; (&lt;em&gt;This really sucks&amp;hellip;&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;POST /users/{uid}/reviews&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;POST /user/{uid}/review&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PUT /users/{uid}/reviews/{rid}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;POST /user/{uid}/review/{rid}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;4-map-relations-by-sub-resources:7c8715bb330e5cc21c99494376b84830&#34;&gt;4. Map relations by sub-resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_normalization&#34;&gt;Normal&lt;/a&gt; relationships intuitively boils down to a schematic form of &lt;strong&gt;ownership&lt;/strong&gt;.&lt;br /&gt;
We can say, for example that a user &lt;code&gt;has many&lt;/code&gt; phone numbers, but &lt;code&gt;has one&lt;/code&gt; profile. Invoices &lt;code&gt;has many&lt;/code&gt; customer, while in turn customers &lt;code&gt;has many&lt;/code&gt; invoices. And so on.&lt;/p&gt;

&lt;p&gt;The best RESTful representation of those kind of relationships is achieved by &lt;strong&gt;sub-resources&lt;/strong&gt;: &lt;code&gt;/books/123/reviews&lt;/code&gt; is the resource endpoint for reviews related to book with ID &lt;code&gt;123&lt;/code&gt;. Along this line, &lt;code&gt;/books/123/reviews/456&lt;/code&gt; is a specific review among those book &lt;code&gt;123&lt;/code&gt; got.&lt;/p&gt;

&lt;p&gt;Redundant? Yes, but also descriptive. And secure: since review &lt;code&gt;456&lt;/code&gt; partains to book &lt;code&gt;123&lt;/code&gt;, trying to &lt;code&gt;GET /books/098/reviews/456&lt;/code&gt; should fail with a &lt;code&gt;404 Not found&lt;/code&gt; error (see below for more status-codes and love).&lt;/p&gt;

&lt;p&gt;Should we also redound the endpoints to provide different access routes? Like, following the example above, should we have a &lt;code&gt;reviews/456/books&lt;/code&gt; resource so that I can go backward from reviews to books?&lt;br /&gt;
Well, this really depends on your domain: if you know you need a list of reviews, no matter the book they are related to, or (to add a dimension to this depiction) if you may need reviews by author, like &lt;code&gt;/users/987/reviews&lt;/code&gt;, then why not? I would go further and say that you can go fancy with filters on a &lt;code&gt;/reviews&lt;/code&gt; resource endpoint (see below for filters galore).&lt;/p&gt;

&lt;p&gt;Just avoid proliferating your endpoint just for the sake of having them at hand. Design is the most important step in API development and declaring resources informs by  itself about the hierarchy, relations and logic the clients are expected to follow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/04-subres-cat.png&#34; alt=&#34;Sub cat behaving hierarchically&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;GET /users/{uid}/reviews&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;GET /reviews?byUserId={uid}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;PUT /users/{uid}/reviews/{rid}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;PUT /userReviews/{rid}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;5-negotiate-format-in-http-headers:7c8715bb330e5cc21c99494376b84830&#34;&gt;5. Negotiate format in HTTP headers&lt;/h3&gt;

&lt;p&gt;This is a rule many frameworks allows to break easily, but trust me: there are headers for content negotiation and they work well and consistently.&lt;br /&gt;
Request headers allow the server and the client to specify which kind of data you are passing and expecting in the request body. Are the client sending XML with its &lt;code&gt;POST&lt;/code&gt;? Is the server supposed to respond with a JSON payload to that &lt;code&gt;GET&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Two nice headers are available for this and here they are in all their splendour:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Content-type&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specifies what&amp;rsquo;s inside the request body.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specifies which format the server is supposed to pack the response so that it doesn&amp;rsquo;t stink.&lt;/p&gt;

&lt;p&gt;Those headers accept mime-types, like &lt;code&gt;Content-type: application/json&lt;/code&gt; or &lt;code&gt;Accept: text/xml&lt;/code&gt;. Compare this to other means like slapping a fake file extension at the end of the resource URI:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;GET /books/123.json&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;to inform the server we are expecting a JSON payload&amp;hellip; way more expressive and powerful if you want, for example, a &lt;code&gt;JSON-LD&lt;/code&gt; HATEOAS payload, or other forms of RDF structure:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Accept: application/json+ld&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Accept: application/rdf+json&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try to pollute this in a fake extension, a parameter or (may God forgive) as part of the request body. The mere effort is simply nonsense!&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Right&lt;/th&gt;
&lt;th&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Type : application/json&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PUT /reviews.json&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Accept : text/xml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /reviews?format=xml&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;6-leverage-powerful-http-caching:7c8715bb330e5cc21c99494376b84830&#34;&gt;6. Leverage powerful HTTP caching&lt;/h3&gt;

&lt;p&gt;This paragraph would deserve a full book &lt;em&gt;per se&lt;/em&gt;. The topic is really huge and I don&amp;rsquo;t even have the experience to compete in clarity and completeness with other authors.&lt;br /&gt;
Still I feel that HTTP caching features are often overlooked by many, mostly when it comes to REST API design.&lt;/p&gt;

&lt;p&gt;To support my statement I often take as an example the fact that (in my experience) far too often the &lt;code&gt;etag&lt;/code&gt; header goes totally unconsidered during API design, though it is a brilliiant solution to content-based cache invalidation.&lt;/p&gt;

&lt;p&gt;Google has a great article on &lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&#34;&gt;HTTP caching&lt;/a&gt; on the Developer Network.
Just remember these three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The problem with caching is its &lt;em&gt;invalidation strategy&lt;/em&gt;; pretty obvious but it&amp;rsquo;s often very tricky to come up with a good one&lt;/li&gt;
&lt;li&gt;HTTP allows for &lt;em&gt;content-based&lt;/em&gt; and &lt;em&gt;time-based&lt;/em&gt; invalidation, which is a real boon since &lt;em&gt;you can trade off performances and data reliability&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Being based on response headers, HTTP caching allows &lt;em&gt;per-resource strategies&lt;/em&gt;, which means you can carry out the aforementioned trade-offs depending on the nature of the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not bad of a transfer protocol, uh? :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/06-cachecopy-cat.png&#34; alt=&#34;Copy cat :D&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;7-allow-for-collections-filtering-sorting-and-paging:7c8715bb330e5cc21c99494376b84830&#34;&gt;7. Allow for collections filtering, sorting and paging&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is query parameters time!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After having disparaged query parameters in almost all former examples, here they come to save our day. Did you know humans can easily find an element in up to a dozen, with little to none &lt;a href=&#34;https://en.wikipedia.org/wiki/Cognitive_load&#34;&gt;cognitive load&lt;/a&gt;? That&amp;rsquo;s why good interfaces allow for filtering result-sets (and why it is so important to rack high on search engines, just to say).&lt;/p&gt;

&lt;p&gt;Narrowing and ordering sets is so pervasive in computing and information technology that we tend to take it for granted. Client applications (even on a server-to-server basis) will often require a narrow set of results, specific to some criteria. This is important to avoid sending heavy payloads that the client, and leave all the storage technology behind the service layer do the job it is probably most qualified.&lt;/p&gt;

&lt;p&gt;Query parameters can express sorting and filtering criteria, as well as paging long result sets.&lt;br /&gt;
It is important, in my opinion, to point out a subtle difference between &lt;em&gt;filtering results&lt;/em&gt; and &lt;em&gt;identifying a resource&lt;/em&gt;. Take those two different URIs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/users/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users?uid=1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;both seems legit ways to get - say - the profile of the user whose id is &lt;code&gt;1&lt;/code&gt;. But they is a difference: the first is a URI (&lt;em&gt;universal resource identifier&lt;/em&gt;, remarkably) for a user profile, the other is not. Actually the second URI identifies a collection of user profiles which incidentally (given the restricting filter applied) is composed by a single item.&lt;/p&gt;

&lt;p&gt;I even expect the payload to differ substantially. In case 1 it should be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &#39;uid&#39; : 1,
   &#39;name&#39; : &#39;John Doe&#39;,
   ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while in the second case I expect it to be&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[
   {
      &#39;uid&#39; : 1,
      &#39;name&#39; : &#39;John Doe&#39;,
      ...
   }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that is in fact an array with a single item.&lt;br /&gt;
This &lt;em&gt;matters&lt;/em&gt;! If you need to identify a specific resource to perform state-changing operations on it, you should really have a URI for it.&lt;/p&gt;

&lt;p&gt;This is also true at some extent for collections of related items. Take this as an example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/users/1/books&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/books?owner_id=1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is trickier and it really depends on what you need in the domain of your application. Is the collection of books owned by a specific user` a resource by itself? Or in better words, are book collections resources for the users of your system? If so, being a resource, the user&amp;rsquo;s book collection deserves a universal identifier. If not, go with a filtered collection.&lt;br /&gt;
Mind that nothing stops you to have both, but don&amp;rsquo;t just throw them in for good measure&amp;hellip; think about your domain, how entities are related and what kind of operations you want to perform on a resource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/07-mindurfilters-cat.png&#34; alt=&#34;Copy cat :D&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OK, back to our filters, sorting and paging. Query parameters are pretty flexible and you can go fancy with expressiveness. Here is some example of how you can empower your clients:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Right&lt;/th&gt;
&lt;th&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /users?sort=-age,+name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /users?sortAsc=name&amp;amp;sortDesc=age&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /users/{uid}/reviews?rate&amp;gt;=3&amp;amp;published=1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /userReviews?uid={uid}&amp;amp;rate&amp;gt;=3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /books?format=[epub,mobi]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /books?format=epub&amp;amp;format=mobi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To close this paragraph with one more digression, I&amp;rsquo;m not a fan of field-selection, that is allowing the client to list the fields it wants to receive for a resource representations. It surely can come in handy, but mind that APIs are not a trendy way to allow a client to access a database. A service layer is, as the name implies, something that provide a service: it often holds business logic behind its endpoints.&lt;br /&gt;
There are cases where your API is simply a secure and decoupled persistence layer, while your client holds all of the business logic. Good examples of this are some dedicated iOS or Android apps, which doesn&amp;rsquo;t even have a web counterpart. As long as clients performing the same functions over and over proliferate on different channels (web, SmartTVs, mobile OSes, etc), you service layer will become a RESTful representation of your application model.&lt;/p&gt;

&lt;p&gt;Field selection in filters, not bad &lt;em&gt;per se&lt;/em&gt;, smells a bit: think twice if you are not envisioning your API as a mere data-access layer.&lt;/p&gt;

&lt;h3 id=&#34;8-version-your-api:7c8715bb330e5cc21c99494376b84830&#34;&gt;8. Version your API&lt;/h3&gt;

&lt;p&gt;This is really as simple as it seems, but it&amp;rsquo;s a &lt;strong&gt;golden rule&lt;/strong&gt;. Your clients should &lt;strong&gt;always&lt;/strong&gt; have the possibility to reach a specific production version of your API, on a specific URL.&lt;/p&gt;

&lt;p&gt;If you work mainly with web applications you can wonder why this matters. After all if you introduce breaking changes in your API but deploy a matching client that supports those changes, there is not problem, right? Tackling into mobile apps should make you change your mind: you can&amp;rsquo;t just push updates to customers&amp;rsquo; phones (er, &lt;a href=&#34;http://microsoft.github.io/code-push/&#34;&gt;almost&lt;/a&gt;). If your clients are outside of your control then, the game is almost over.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why it is so important to deploy your API to a URL which specify your API version. But pay attention, we are not talking about exposing your codebase versioning: you can deploy the &lt;code&gt;1.14.05&lt;/code&gt; codebase version, which is exposing the version &lt;code&gt;v1&lt;/code&gt; of your API. As long as the API does not introduce breaking changes (that is to say, if you can query each endpoint, receiving the same response format from them), you must consider it the same version.&lt;/p&gt;

&lt;p&gt;In fact there are cases when a specific version of your codebase delivers fixes or changes to more than a version of your API. API versioning refers to format, not development iterations.&lt;br /&gt;
Of course, the major version of your codebase can be the same as the format version of your API. This makes perfect sense and help keeping things under control, so &lt;code&gt;codebase 1.x&lt;/code&gt; &amp;rarr; &lt;code&gt;API v1&lt;/code&gt;, and &lt;code&gt;codebase 2.x&lt;/code&gt; &amp;rarr; &lt;code&gt;API v2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where to place your version? My preference is in the domain, like &lt;code&gt;https://v1.api.stick.says&lt;/code&gt;, but even a subtree like &lt;code&gt;https://api.stick.says/v1&lt;/code&gt; (which is supported out of the box by most frameworks) does the job.&lt;/p&gt;

&lt;p&gt;It goes without saying that the point here is not to keep each and every version of your API online indefinitely! You can (and will) surely deprecate old versions soon or late, but you can do this on a public schedule, communicating the variations and version EOL, and collecting information about the degree of adoption of new versions by the clients (hint: use logs to collect usage statistics of your endpoints!).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Right&lt;/th&gt;
&lt;th&gt;Wrong&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /v1/users?sort=-age,+name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET /users?format=old&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;POST api.v2.stick.says/users&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;POST /users?format=2017&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;9-return-meaningful-status-codes:7c8715bb330e5cc21c99494376b84830&#34;&gt;9. Return meaningful status codes&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;HTTP has response status codes!&lt;/em&gt; This is not a breaking news, it has since its inception and we are all well aware of the (in)famous &lt;code&gt;404 Not found&lt;/code&gt; that pops here and there in our browsers.&lt;br /&gt;
Still, 20+ years from the devision of HTTP, I still happen to see established professionals going with &lt;code&gt;200 OK&lt;/code&gt; as the unique response code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/09-senseevil-cat.png&#34; alt=&#34;I sense evil&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you are about to say one of those&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;m placing my error status in the payload, so no need to use HTTP codes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is really not important, just return 200 OK so that client lib won&amp;rsquo;t complain&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Status WAT?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please, go back enveloping SOAP and leave me alone wondering what went wrong with the world! :D&lt;/p&gt;

&lt;p&gt;Jokes apart, you&amp;rsquo;ll probably think by now that my sweet spot for HTTP may be a little too &lt;em&gt;sweeeet&lt;/em&gt; (creepy indeed), but hey: Sir Tim Berners Lee created one of the most complete and expressive transfer protocols in the late 80s. I&amp;rsquo;m pretty sure most of my readers were shaking their rattles at the time. So really, don&amp;rsquo;t ignore the fact that the fundamental protocol that ended up killin all former nerd/net technologies and cultures were designed to do &lt;strong&gt;one thing well&lt;/strong&gt;. And heck, it does! :)&lt;/p&gt;

&lt;p&gt;Returning meaningful status codes means your client (the machine, not the human) can understand what happened to the request without analyzing the response payload, which in turn helps your client (the human, not the machine) to get additional information, useful to a sentient being.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll list here some HTTP status codes trivia which may or may not be common knowledge for you. If you learn something new, my advice is to dig deeper into HTML protocol and learn what it can already do for us.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP status codes are numerals with an optional description&lt;/strong&gt;: The format of response status codes is always a 3-digits number like &lt;code&gt;201&lt;/code&gt;, &lt;code&gt;302&lt;/code&gt;, &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;401&lt;/code&gt;. Mnemonic descriptions are added so that us meatbags can remember what they mean: &lt;code&gt;401 Unauthorized&lt;/code&gt;, &lt;code&gt;302 Permanent redirect&lt;/code&gt; or &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP status codes are categorized by the most significant digit&lt;/strong&gt;: Being very unlikely for an application to have hundreds of different statuses of the same category (if you are in such a situation you may double check your assumptions&amp;hellip; it smells a bit), the &lt;em&gt;hundreds&lt;/em&gt; are used to represent status categories. For a complete reference see the related part of &lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&#34;&gt;RFC 2616&lt;/a&gt;. For a shorter version and some notable insight, see &lt;a href=&#34;#httpstatuses&#34;&gt;my table in the end notes&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;There is space for custom error code in each category&lt;/strong&gt;: And, as long as you document them for your client, you are encouraged to use them! You may not know this, but there is an actual &lt;a href=&#34;https://tools.ietf.org/html/rfc2324&#34;&gt;&lt;code&gt;418 I&#39;m a teapot&lt;/code&gt;&lt;/a&gt; implementation case registered in history. And &lt;a href=&#34;https://github.com/symfony/http-foundation/blob/master/Response.php#L61&#34;&gt;Symfony framework natively supports it&lt;/a&gt; :). So really, don&amp;rsquo;t be shy and make good use of HTTP flexibility to inform your client about what the heck happened to their request.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;You can haz cats&lt;/strong&gt;: Yes, there are things like &lt;a href=&#34;https://http.cat/&#34;&gt;HTTP Status Cats API&lt;/a&gt; or, if you feel more like you want puppies, &lt;a href=&#34;https://httpstatusdogs.com/&#34;&gt;HTTP Status Dogs&lt;/a&gt;. I can&amp;rsquo;t state how important is you make use of this bleeding edge technologies! &lt;strong&gt;World can be saved, after all&amp;hellip;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/09-notfound-cat.jpg&#34; alt=&#34;Toy resource not found&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;good:7c8715bb330e5cc21c99494376b84830&#34;&gt;Good&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;401 UNAUTHORIZED

{
  &amp;quot;errors&amp;quot;: [
     {
         &amp;quot;user_msg&amp;quot;: &amp;quot;You shall nooot paaass!!!&amp;quot;,
         &amp;quot;internal_msg&amp;quot;: &amp;quot;Balrogs are not welcome&amp;quot;,
         &amp;quot;code&amp;quot;: 666,
         “info&amp;quot;: &amp;quot;http://stick.says/docs/v1/errors/666&amp;quot;
     }
   ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bad:7c8715bb330e5cc21c99494376b84830&#34;&gt;Bad&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;200 OK

{
  “status” : “error”,
  &amp;quot;user_msg&amp;quot;: &amp;quot;You shall nooot paaass!!!&amp;quot;,
  &amp;quot;internal_msg&amp;quot;: &amp;quot;Balrogs are not welcome&amp;quot;,
  &amp;quot;code&amp;quot;: 666,
  “info&amp;quot;: &amp;quot;http://stick.says/docs/v1/errors/666&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-use-modern-authorization-methods:7c8715bb330e5cc21c99494376b84830&#34;&gt;10. Use modern authorization methods&lt;/h3&gt;

&lt;p&gt;If you live in a well-off countryside area like me, you may have retained the old habit of putting your keys under the doormat.&lt;br /&gt;
Actually I am not! Times changes and I am not that akin to suffer thievery. Securing your resources is important, but most important yet, is to know who can access which one.&lt;/p&gt;

&lt;p&gt;Bear with the analogy for a while, please. My friends may come visit, they just have to ring the bell and say their name. In this they are able to access my house while I am in.
But this doesn&amp;rsquo;t mean I give them free access to my wardrobe or family bank account. Those are resources that may be accessed only by high privileged people in my family.&lt;/p&gt;

&lt;p&gt;Now, what if my wife wants to access the home-banking and performs transitions? Sure she can, so I can let her use my token (it&amp;rsquo;s actually the opposite, lol). Giving her my token, I allow her to act &lt;em&gt;on my behalf&lt;/em&gt; on the &lt;code&gt;bank account&lt;/code&gt; resource. Most important, this can happen outside of my control, as long as the authorization is valid.&lt;/p&gt;

&lt;p&gt;So it is possible for a set of agents to access the house via &lt;strong&gt;authentication&lt;/strong&gt; (identifying them at the door) and to access some resource under my direct or indirect supervision, for their staying.
Other specific agents may instead manage private resources by gaining an &lt;strong&gt;authorization&lt;/strong&gt; (asking me the token). The nuance that tells &lt;em&gt;authentication&lt;/em&gt; from &lt;em&gt;authorization&lt;/em&gt; is subtle but can be clearly stated in that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Authentication is a necessary condition to gain authorization&lt;/em&gt;: I must know who you are before you can act on my behalf. It is not sufficient to gain control of my resources though.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authorization has one or more scopes&lt;/em&gt;: Once you are authenticated (I know who you are), I can grant you access to a set of resources you can use on my behalf. This access can be temporary and conditioned to a specific logic. Let&amp;rsquo;s call those set of resources &lt;code&gt;scopes&lt;/code&gt;. It is clear that access to different scopes like &lt;em&gt;See bank account balance&lt;/em&gt;, &lt;em&gt;Trigger money transfers&lt;/em&gt;, &lt;em&gt;Use TV&lt;/em&gt;, &lt;em&gt;Access wardrobe&lt;/em&gt;, etc may be granted to different people over time.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authorization can be revoked&lt;/em&gt;: Revoking authentication means losing memory of the identity of someone, since authentication boils down to identifying someone. Denying access to a resource instead means you are revoking an authorization to someone you can identify.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/20170304-rest-series/10-nomoremetaphors-cat.png&#34; alt=&#34;Please, move on...&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Uoookkey, enough metaphors; in the context of our service layer we can say the user can authenticate by providing credentials and be authorized to access resources by a permissions framework.&lt;/p&gt;

&lt;p&gt;Now, HTTP is a stateless protocol so if you want to have some RESTpect (sorry), you&amp;rsquo;d better &lt;strong&gt;avoid relying on sessions&lt;/strong&gt; to authorize the client.&lt;br /&gt;
Use modern stateless authorization framework instead.&lt;/p&gt;

&lt;p&gt;The two most renown example here are &lt;a href=&#34;https://oauth.net/2/&#34;&gt;Oauth2&lt;/a&gt; and &lt;a href=&#34;https://jwt.io/&#34;&gt;JSON Web Tokens&lt;/a&gt; (aka JWT).
Both are standards (actually Oauth2 is not, it &lt;a href=&#34;https://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/&#34;&gt;failed to be standardized&lt;/a&gt; and is now considered a framework) to describe how a client may act on behalf of an authenticated user in a stateless world.&lt;/p&gt;

&lt;p&gt;Digging into the two would require a series of posts (or entire books) but in the scope of this article it suffice to say that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oauth2 is a great way to allow other server applications to access your resources on behalf of a user&lt;/strong&gt;&lt;br /&gt;
Social are the most common example of this: when you take one of those silly tests like &amp;ldquo;What mutant animal from the world of Sglorbz am I?&amp;rdquo; on Facebook, you are asked to grant access to your profile data (and God knows what else!) to (say) &amp;ldquo;Silly online quizzes Inc.&amp;rdquo;, which is a third party application that knows nothing about you but wants to create a profile and post things on your wall regarding your assumed Sglorbziness.&lt;br /&gt;
To achieve this the app asks you (the resources owner) to unlock more or less permanent access to your profile and the ability to post on your wall (yes, these are &lt;em&gt;scopes&lt;/em&gt;). The silly tests app gains a token on authorization, which can be used to act on that scopes, even when your browser is closed and you are asleep. Actually the server&amp;rsquo;s app may impersonate you within the boundaries of the granted scopes.&lt;br /&gt;
You can do this too: I mean you can both allow other apps to act on behalf of your users (that is you expose an Oauth2 Server) or you may hook into another REST API gaining access to its resources (you are acting like an Oauth2 client). Often you end up doing both, and that&amp;rsquo;s the web, and it&amp;rsquo;s great!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JWT is the right way to allow a rich client web application or a native application to act as a user interface&lt;/strong&gt;&lt;br /&gt;
Modern single page application written in frameworks like Angular.js or React holds part of the application logic in the client. You may be accustomed with the concept of server session, that is the server holding a state behing an HTTP request/response curtain. JTW allows for a real stateless connection: again, a token is exchanged with each request to match the client&amp;rsquo;s authorizations as well as the user&amp;rsquo;s authentication. JWT tokens generally have a short life and can hold actual information in a smart and secure way.&lt;br /&gt;
A modern API which goal is to serve client application should really rely on JWT to handle permissions!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;final-thoughts:7c8715bb330e5cc21c99494376b84830&#34;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Here you are my 10 golden rules for a perfectly REST API! &lt;strong&gt;Hurray!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or not? I can here some of you:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;But wait&amp;hellip; where is HATEOAS?! And you old fart forgot to mention RDF also!!?!1!1!!cos(0)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, let&amp;rsquo;s make clear that despite I&amp;rsquo;ve kept an overconfident tone, which was hopefully just hilarious, &lt;strong&gt;the above doesn&amp;rsquo;t want to be a universal source of truth about what makes a good REST API&lt;/strong&gt;. It is just what I learned over the years for you to put to good use.&lt;/p&gt;

&lt;p&gt;That said, I have mixed feelings about &lt;a href=&#34;http://en.wikipedia.org/wiki/HATEOAS&#34;&gt;HATEOAS&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;RDF&lt;/a&gt;-related stuff (JSON-LD etc, for the record).&lt;br /&gt;
My guts say - and I would be happy to prove them wrong - that to date we have a lot of stuff that seem to perfectly match REST in describing resources semantics, but it&amp;rsquo;s unclear how the client should actually behave with those data. Since yep, hypermedia navigation is all about behavior.&lt;/p&gt;

&lt;p&gt;Take HATEOAS for example: nice to receive a list of available links (the catalogue of legit state transitions, to be a bit pedantic) in the payload, now what?&lt;br /&gt;
Without a clear behavioral framework to apply, client side, it is left to the developer to understand what to do with the information&amp;hellip; at that point it is better not to do any server-side assumption and provide clear documentation so the client developer can forge URIs by himself, handling unavailable transitions at application level.&lt;/p&gt;

&lt;p&gt;Almost the same with RDF. Great meaningful semantic but then when it comes to hypermedia-ize it all, we need stuff like &lt;a href=&#34;http://restdesc.org/&#34;&gt;RESTdesc&lt;/a&gt; or &lt;a href=&#34;http://www.markus-lanthaler.com/hydra/&#34;&gt;Hydra&lt;/a&gt; (which is in turn an RDF application by itself, to make things worse :D) to describe how the client is supposed to behave to get along. So what is the client logic actually supposed to do in the first place?&lt;/p&gt;

&lt;p&gt;To finish, a mention about content enrichment: I&amp;rsquo;d leave it to business middleware. It&amp;rsquo;s not just a matter of hype like &lt;em&gt;woohoo, microservices are all the rage, so never create a monolith anymore (but do middleware or clients will knock your door down by night)&lt;/em&gt;.&lt;br /&gt;
It&amp;rsquo;s just that it&amp;rsquo;s unhealthy to have native modality to perform content enrichment in the hope that your data-level service layer will hit all possible clients use cases. That&amp;rsquo;s what specialized middlewares are for, put them to good use!&lt;/p&gt;

&lt;h2 id=&#34;conclusions:7c8715bb330e5cc21c99494376b84830&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;To wrap it up, &lt;strong&gt;don&amp;rsquo;t stop here!&lt;/strong&gt; There are a lot of great books out there on how to design great REST APIs, go read them and better yet, get your hands dirty!&lt;/p&gt;

&lt;p&gt;Reach for your &lt;a href=&#34;https://apiary.io/&#34;&gt;apiary&lt;/a&gt; account or start a &lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger&lt;/a&gt; project and grind your teeth.&lt;/p&gt;

&lt;p&gt;Just remember a great service layer starts from its design, so don&amp;rsquo;t rush installing the last new sensational tool: &lt;strong&gt;your brainwork comes first&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See you soon with the next article of the series: &lt;strong&gt;Drupal 8 REST features breakdown&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;additional-resources:7c8715bb330e5cc21c99494376b84830&#34;&gt;Additional resources&lt;/h2&gt;

&lt;h3 id=&#34;further-readings:7c8715bb330e5cc21c99494376b84830&#34;&gt;Further readings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://apisyouwonthate.com/&#34;&gt;Build APIs you won&amp;rsquo;t hate&lt;/a&gt; - Book by &lt;a href=&#34;https://philsturgeon.uk&#34;&gt;Phil Sturgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920021575.do&#34;&gt;REST API Design rulebook&lt;/a&gt; - Book by &lt;a href=&#34;http://www.oreilly.com/pub/au/4998&#34;&gt;Mark Masse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-name-httpstatuses-a-personal-blurb-on-http-status-codes:7c8715bb330e5cc21c99494376b84830&#34;&gt;&lt;a name=&#34;httpstatuses&#34;&gt;&lt;/a&gt;Personal blurb on HTTP status codes&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Range&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1xx&lt;/td&gt;
&lt;td&gt;Informational&lt;/td&gt;
&lt;td&gt;Intended for when you have to respond with an information about the management of the request, like &lt;code&gt;100 Continue&lt;/code&gt; (which I think I spotted only in proxies traffic) or &lt;code&gt;101 Switching protocols&lt;/code&gt; (which informs the client that the server is OK in changing the application protocols).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2xx&lt;/td&gt;
&lt;td&gt;Successfull&lt;/td&gt;
&lt;td&gt;Inform the client that &lt;em&gt;Yay! Allrite bro!&lt;/em&gt; The infamous &lt;code&gt;200 OK&lt;/code&gt; which is a laconic way to say &lt;em&gt;the request has been understood and here is the content you required&lt;/em&gt; is the most known specimen, but &lt;code&gt;201 Created&lt;/code&gt; (after a succesfull &lt;code&gt;POST&lt;/code&gt;) or &lt;code&gt;204 No content&lt;/code&gt; (when you ask for a resource which &lt;em&gt;is there&lt;/em&gt; but has no content, like an empty collection) are good examples to understand what those codes are there for.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3xx&lt;/td&gt;
&lt;td&gt;Redirection&lt;/td&gt;
&lt;td&gt;Handle all situations where the client is redirected to another source of information or URL. Local cache is a source if information, thus the &lt;code&gt;304 Not modified&lt;/code&gt; makes perfect sense in this family. Renowned examples are &lt;code&gt;301 Moved permanently&lt;/code&gt; and &lt;code&gt;302 Found&lt;/code&gt;, but also &lt;code&gt;305 Use proxy&lt;/code&gt; showcases how useful those code are.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4xx&lt;/td&gt;
&lt;td&gt;Client Error&lt;/td&gt;
&lt;td&gt;Used in every case where the request can&amp;rsquo;t be processed but it seems the client is to blame. The most widely known is the &lt;code&gt;404 Not found&lt;/code&gt; upon everybody in the world stumbled at least once. Note that this differs from &lt;code&gt;204 No content&lt;/code&gt; in that querying a collection with no items in it (for example due to heavy filtering) doesn&amp;rsquo;t mean the collection isn&amp;rsquo;t there. Querying for a URI which does not represent any resouce (hence is not routed/handled by the system) is actually a client error! But learn more and use stuff like &lt;code&gt;401 Unauthorized&lt;/code&gt;, that is the client didn&amp;rsquo;t provide necessary credentials to access a protected resource, or &lt;code&gt;405 Method not allowed&lt;/code&gt; for when the client tries to use an HTTP method/verb on a resource that does not support it (&lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;PATCH&lt;/code&gt; a collection for example?).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5xx&lt;/td&gt;
&lt;td&gt;Server Error&lt;/td&gt;
&lt;td&gt;Those are for when the request can&amp;rsquo;t be processed but the server knows the problem lies in its request processing, not the request itself. The most spotted error in this category is the pretty uninfomative &lt;code&gt;500 Internal server error&lt;/code&gt;, which map one-to-one with the &lt;code&gt;Uknown error&lt;/code&gt; or &lt;code&gt;Unexpected error&lt;/code&gt; some can remember from Windows 9x era. If the server has any clue on what happened it may be more helpful, returning stuff like &lt;code&gt;501 Not implemented&lt;/code&gt; or &lt;code&gt;505 HTTP version not supported&lt;/code&gt; (try to find one of those old farts, if you can!). Just mind that &lt;em&gt;it is really unlikely you will have to manage 5xx status codes at application level&lt;/em&gt;, so use them only if you really know what you are doing!&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Trapped by an amend, saved by a reflog</title>
      <link>http://sparkfabrik.github.io/2016/11/29/trapped-by-amend-saved-by-reflog</link>
      <pubDate>Tue, 29 Nov 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/11/29/trapped-by-amend-saved-by-reflog</guid>
      <description>

&lt;p&gt;We use Git on a daily basis, and most of the time we always enter the same commands.
It can happen to found ourselves trapped by one of them, sometimes because we forgot a side-effect, other times because we confused the right option.
No need to worry though, since Git is equally able to put you in trouble and save your day with the same ease. So, let me tell you how I was hit by an &lt;code&gt;--amend&lt;/code&gt; during a commit and how I easily got out.&lt;/p&gt;

&lt;p&gt;Sometimes during the day, especially in the time right before lunch or leaving work, it&amp;rsquo;s possible to forget one the most important rules of the savvy developer: in the console, you can be quick with all the keys, but think twice before pressing &amp;ldquo;enter&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Sure, I managed to break that very rule some days ago. Luckily that was a chance to remind me how much powerful Git is and how sometimes the solutions to an apparently bad situation can be just a few commands away.&lt;/p&gt;

&lt;h2 id=&#34;the-amend-secret:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;The amend secret&lt;/h2&gt;

&lt;p&gt;As many of you probably know, the &lt;code&gt;git commit --amend&lt;/code&gt; command can be used to edit the message of the last commit in the history. This is one of the most common uses because - as developers - we are prone to typos and bad phrasing.
But the &lt;code&gt;--amend&lt;/code&gt; option can also be used to include &lt;em&gt;new code&lt;/em&gt; in the last commit.&lt;/p&gt;

&lt;p&gt;For example:
Let&amp;rsquo;s say you&amp;rsquo;ve just created a commit but you&amp;rsquo;ve also forgot to add a block comment to that very method you&amp;rsquo;ve written, and you don&amp;rsquo;t want to have another commit in the history, for various reasons. You have many choices at this point, including creating a new commit with the new lines and squash it with the previous one using the &lt;code&gt;git rebase&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;But you can also do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add new line and prepare them for the commit.
git add -p
# Amend the previous commit and add to it the staged modifications.
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A this point, you are asked to edit the previous commit message and the staged edits will be included in it. Useful, isnt&amp;rsquo;it?&lt;/p&gt;

&lt;h2 id=&#34;the-side-effect:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;The side effect&lt;/h2&gt;

&lt;p&gt;This little trick can be very handy in many situations, but it can also be a very sharp double-edged sword because, as you probably have guessed, you can use the amend on &lt;em&gt;any&lt;/em&gt; commit including, for example, a &lt;em&gt;merge commit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, here&amp;rsquo;s a possible sequence of commands that could generate a bad situation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# You add some modifications.
git add -p
# Then create a new commit
git commit -m &#39;Added new public method&#39;
# Then merge the last develop in your working branch
git fetch --all
git merge origin/develop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far the history of your branch could be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ git log --oneline

b1748d6 Merge remote-tracking branch &#39;origin/develop&#39; into feature/my_branch
a69fa15 Added new public method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you accidendally amend the next modifications instead of creating a new commit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Write a block comment for your new method and stage the new modifcations.
git add -p
# But instead of creating a new commit, you use the --amend option.
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the history will be almost the same, but the hash of the &lt;em&gt;merge commit&lt;/em&gt; will be different and that commmit will include your new block comment too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ git log --oneline

f5a5377 Merge remote-tracking branch &#39;origin/develop&#39; into feature/my_branch
a69fa15 Added new public method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s bad.&lt;/p&gt;

&lt;h2 id=&#34;the-git-reflog-solution:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;The git reflog solution&lt;/h2&gt;

&lt;p&gt;Since you want to restore the situation before the amend, you can decide to use the &lt;code&gt;git reflog&lt;/code&gt; in combination with a &lt;code&gt;git reset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;git reflog&lt;/code&gt; command will prompt the history of the last commands you&amp;rsquo;ve entered.
The output will look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ git reflog

f5a5377 HEAD@{0}: commit (amend): Merge remote-tracking branch &#39;origin/develop&#39; into feature/my_branch
b1748d6 HEAD@{1}: merge origin/develop: Merge made by the &#39;recursive&#39; strategy.
a69fa15 HEAD@{2}: Added new public method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see you have a separate line for each commit action made, and it is pretty easy to solve the problem. Having the &lt;strong&gt;HEAD@{1}&lt;/strong&gt; hash now you can go back there, removing &lt;em&gt;de facto&lt;/em&gt; the last command from the history.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# We go back in the history up to the merge commit.
git reset --soft b1748d6
# At this point we&#39;ll have all the edits that we wrongly added to the merge commit already staged and ready to be added to a new commit.
git commit -m &#39;Added new block comment&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:3505e5c32acab82cdbe51550c3e49a44&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Here it is. One simple problem and one simple solution.
What I learned when I&amp;rsquo;ve found myself in a situation like this one is that your understanding of Git can really make the difference sometimes. Knowing the commands main purpose is as important as having a basic undestanding of their possibile secondary uses and side effects, but it is also crucial to remember that Git itself provides the tools to investigate and solve critical situations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avoid bottlenecks on a Drupal web application and how identify it with profiling</title>
      <link>http://sparkfabrik.github.io/2016/11/22/avoid-bottlenecks-on-a-drupal-web-application-and-how-identify-it-with-profiling</link>
      <pubDate>Tue, 22 Nov 2016 11:02:30 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/11/22/avoid-bottlenecks-on-a-drupal-web-application-and-how-identify-it-with-profiling</guid>
      <description>

&lt;h2 id=&#34;introdution:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Introdution&lt;/h2&gt;

&lt;p&gt;This article is focused on the possible &lt;em&gt;bottlenecks of a web application&lt;/em&gt;, how you can identify it and improve the performance of your code.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll talk about using &lt;em&gt;Blackfire&lt;/em&gt; to get insights on a Drupal-based PHP application running on a LAMP stack.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Application&amp;rsquo;s performance is one of the feature that tells a &lt;em&gt;done&lt;/em&gt; job from a &lt;em&gt;good&lt;/em&gt; job, and shows a focus on quality.&lt;/p&gt;

&lt;p&gt;Scope of this post it to provide a quick-reference that can be used right before to deploying a Drupal (but not only) project to production.
There are two kind of actions that can improve performances: application of best-pratices, that aren&amp;rsquo;t related to product&amp;rsquo;s functions and the logic profiling that depends on domain and the implementation (that can be considered cherry on top).&lt;/p&gt;

&lt;p&gt;We will provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A list of checks, valid for every PHP application, with indication which Drupal components are involved, point by point.&lt;/li&gt;
&lt;li&gt;Tools and methods useful to obtain information about how our application is performing and where bottlenecks are located.&lt;/li&gt;
&lt;li&gt;A pratical example on how to find improvement points and apply necessary changes.&lt;/li&gt;
&lt;li&gt;Some pro-tips dictated by experience on common pitfall and how bypass them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;performance-best-practice-checklist:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Performance best-practice checklist&lt;/h3&gt;

&lt;p&gt;At first level of the list we can see &amp;ldquo;general&amp;rdquo; checks that we can perform for a generic web application, at the second level a Drupal transliteration of the point.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check that caches are active and working&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;In Drupal&lt;/em&gt;: Activate page cache, block cache and view cache as the miniumum set.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Aggregate and minify CSS and JS to improve bandwidth consumption.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;In Drupal&lt;/em&gt;: A good starting point are to use the tools provided by our favourite CMF in the &lt;code&gt;development - performance&lt;/code&gt; section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deactivate development component: all frameworks provide a set of useful tolls/function to help developers but all of these are really performances hogs!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;In Drupal&lt;/em&gt;: pay attention to deactivate modules like &lt;em&gt;devel&lt;/em&gt;, _update&lt;em&gt;status&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt; before to deploy in production.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Deactivate &lt;em&gt;cron&lt;/em&gt; automation managed by the application in automatic way (like Drupal&amp;rsquo;s cron or Wordpress&amp;rsquo;s wp-cron).&lt;br /&gt;
Be sure you are running batches and asynchronous tasks during low-traffic hours, wherever possible. Remember to demand critical tasks or heavy tasks to external workers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deactivate any database logger, and switch logs to &lt;em&gt;syslog&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check images size: manage size of every image applying standard dimension for each specific case. Pay a lot of attention if you have
numerous image dimension: often scripts that manages image resize/transforming consumes a lot of resources.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;In Drupal&lt;/em&gt;: Use opportune _image&lt;em&gt;styles&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check retrieval process of external resources (feed, streams, etc.). I mean that we need to reply to questions like &lt;code&gt;How many time the application need to retrieve last Company&#39;s tweets?&lt;/code&gt;, &lt;code&gt;How many time was spent to collect weather info to populate this badge?&lt;/code&gt;, &lt;code&gt;It&#39;s normal that before to load the page we collect info related to the last match results?&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;detection-of-application-s-bottleneck:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Detection of application&amp;rsquo;s bottleneck&lt;/h3&gt;

&lt;p&gt;Once we went through all the list above, your server will probably sigh in relief. This doesn&amp;rsquo;t mean our work is done: we need to use right tools (especially if we lack specific references to slow page) to find the cause of th high server load. Before doing anything else we need to collect data about what&amp;rsquo;s going under the hood, so we can improve in the right direction. Yes, I&amp;rsquo;m talking about &lt;a href=&#34;https://en.wikipedia.org/wiki/Profiling_(computer_programming&#34;&gt;profiling&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&#34;getting-insights-by-environmental-monitoring:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Getting insights by environmental monitoring&lt;/h4&gt;

&lt;p&gt;On Drupal 7, we can use the &lt;a href=&#34;https://www.drupal.org/project/performance&#34;&gt;Performance Logging&lt;/a&gt; module to profile time spent to generate pages, memory consumption, and how many queries fire during page load. We only need to navigate our site to populate the data table. On Drupal 8 the great &lt;em&gt;Web Profiler&lt;/em&gt; module, recently merged into &lt;a href=&#34;https://www.drupal.org/project/devel&#34;&gt;Devel&lt;/a&gt; project is the best option.&lt;/p&gt;

&lt;h4 id=&#34;environment-side:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Environment side&lt;/h4&gt;

&lt;p&gt;The environment (local but also production), with the right tools can become our better friend to help us to find reasons of application&amp;rsquo;s bottlenecks. There is a lot of profiler, but an excellent choice is &lt;a href=&#34;http://blackfire.io/&#34;&gt;Blackfire&lt;/a&gt;: free, flexible and very light (his agent can be installed on the production servers with a really really thin overhead). The feature which makes me love Blackfire are his profiler result: a simple and clear diagram of entire code execution flow from the request response to the final output: all function calls will be analyzed and counted to produce a detailed report that contain a lot of useful data like function&amp;rsquo;s time execution, memory consumption, etc. Finally all this data will be collected and the results will be showed to us related to the global status: a function that takes three seconds to produce an output, can be a lower problem related to another function that takes only 0.5 second but it&amp;rsquo;s called ninety time.
Obviously, remember to puts on the mysql slow query log.&lt;/p&gt;

&lt;h4 id=&#34;a-practical-profiling-example:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;A practical profiling example&lt;/h4&gt;

&lt;p&gt;We have a simple Drupal 7 application that display 200 node&amp;rsquo;s titles, but in the wrong way.&lt;/p&gt;

&lt;p&gt;This is a Blackfire profiling output: &lt;a href=&#34;https://blackfire.io/profiles/f911c4ad-792b-4977-af51-d9e3b7649d24/graph&#34;&gt;https://blackfire.io/profiles/f911c4ad-792b-4977-af51-d9e3b7649d24/graph&lt;/a&gt;
We can clearly see a &amp;lsquo;red branch&amp;rsquo; that indicates us where the most of time is spent to generate the page and we can see that the _node&lt;em&gt;load&lt;/em&gt; function was called 200 times after the call to _dsc_module_block&lt;em&gt;view&lt;/em&gt; , uhm IMHO it&amp;rsquo;s better take a look to this function:&lt;/p&gt;

&lt;pre&gt;
function dsc_module_block_view($delta = &#39;&#39;) {
  $block = array();
  switch ($delta) {
    case &#39;page_block&#39;:

    $node_titles = [];
    for ($i = 1; $i &lt; 200; $i++) {
      $node = node_load($i);
      $node_titles[] = $node-&gt;title;
    }
    $content = &#39;&lt;ul&gt;&#39;;
    foreach ($node_titles as $node_title) {
      $content .= &#39;&lt;li&gt;;&#39; . $node_title . &#39;&lt;/li&gt;&#39;;
    }
    $content .= &#39;&lt;/ul&gt;&#39;;
    $block[&#39;subject&#39;] = t(&#39;My block&#39;);
    $block[&#39;content&#39;] = array(
      &#39;#type&#39; =&gt; &#39;markup&#39;,
      &#39;#markup&#39; =&gt; $content,
      &#39;#title&#39; =&gt; t(&#39;Last 100 content&#39;),
    );
    break;
  }
  return $block;
}
&lt;/pre&gt;

&lt;p&gt;With a simple refactoring we can improve the block generation:&lt;/p&gt;

&lt;pre&gt;
function dsc_module_block_view($delta = &#39;&#39;) {
  $block = array();

  switch ($delta) {
    case &#39;page_block&#39;:

      $n_ids = [];

      for ($i = 1; $i &gt; 200; $i++) {
        $n_ids[] = $i;
      }

      $results = db_select(&#39;node&#39;, &#39;n&#39;)
        -&gt;fields(&#39;n&#39;, array(&#39;title&#39;))
        -&gt;condition(&#39;nid&#39;, $n_ids, &#39;IN&#39;)
        -&gt;execute()
        -&gt;fetchAll();
      $content = &#39;&lt;ul&gt;&#39;;
      foreach ($results as $node_title) {
        $content .= &#39;&lt;li&gt;&#39; . $node_title-&gt;title . &#39;&lt;/li&gt;&#39;;
      }
      $content .= &#39;&lt;/ul&gt;&#39;;
      $block[&#39;subject&#39;] = t(&#39;My block&#39;);
      $block[&#39;content&#39;] = array(
        &#39;#type&#39; =&gt; &#39;markup&#39;,
        &#39;#markup&#39; =&gt; $content,
        &#39;#title&#39; =&gt; t(&#39;Last 100 content&#39;),
      );
      break;
    }
    return $block;
  }
}
&lt;/pre&gt;

&lt;p&gt;And the Blackfire&amp;rsquo;s verdict becomes &lt;a href=&#34;https://blackfire.io/profiles/b7243495-11d8-41fc-a374-e7bfe6e21ab7/graph&#34;&gt;https://blackfire.io/profiles/b7243495-11d8-41fc-a374-e7bfe6e21ab7/graph&lt;/a&gt;: &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the time execution saved only with this refactoring.&lt;/p&gt;

&lt;p&gt;Obviously this is a very basic example but it&amp;rsquo;s not a remote possibility that these things happens.&lt;/p&gt;

&lt;h3 id=&#34;some-pro-tips-to-write-code-with-an-eye-on-performance:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Some pro-tips to write code with an eye on performance&lt;/h3&gt;

&lt;p&gt;*While querying the database, ask only for the data you really need. Avoid &lt;code&gt;SELECT * FROM&lt;/code&gt;, or
&lt;pre&gt;
db_select(&amp;lsquo;table&amp;rsquo;, &amp;rsquo;t&amp;rsquo;)
-&amp;gt;fields(&amp;rsquo;t&amp;rsquo;)
&lt;/pre&gt;
that are the same things.
* Load entity in groups, not one by one: avoid &lt;code&gt;entity_load()&lt;/code&gt; like &lt;code&gt;node_load()&lt;/code&gt;, &lt;code&gt;taxonomy_term_load()&lt;/code&gt;, etc. Replace it with &lt;code&gt;node_load_multiple()&lt;/code&gt; or simple queries, if at all possible.
* Use - the - cache
  * Use views&amp;rsquo; caching and specially &lt;em&gt;views results&lt;/em&gt; and &lt;em&gt;rendered content&lt;/em&gt; caching
  * Use _drupal&lt;em&gt;static()&lt;/em&gt; to make data persist throughout the same request and the &lt;em&gt;Cache API&lt;/em&gt; to persist data between different requests over time.
* Demand heavy processes to external workers like &lt;a href=&#34;http://gearman.org/&#34;&gt;Gearman&lt;/a&gt; or use Drupal&amp;rsquo;s &lt;em&gt;Batch API&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;useful-resources:85ecb63f3cadea5d1c4d918e23974e4c&#34;&gt;Useful resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Repo of my DSC talk on Profiling examples: &lt;a href=&#34;https://gitlab.sparkfabrik.com/vincenzo.dibiaggio/dsc-profiling&#34;&gt;https://gitlab.sparkfabrik.com/vincenzo.dibiaggio/dsc-profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hints about query caching: &lt;a href=&#34;https://www.percona.com/blog/2006/07/27/mysql-query-cache/&#34;&gt;https://www.percona.com/blog/2006/07/27/mysql-query-cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Page rendering profiling: Yslow e Google Page Speed&lt;/li&gt;
&lt;li&gt;Browser: Google Developer Tools / Firebug - tab Network&lt;/li&gt;
&lt;li&gt;A good starting point on Views optimization: &lt;a href=&#34;https://www.silviogutierrez.com/blog/optimizing-drupal-views-right-way/&#34;&gt;https://www.silviogutierrez.com/blog/optimizing-drupal-views-right-way/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High Performance Drupal: &lt;a href=&#34;http://shop.oreilly.com/product/0636920012269.do&#34;&gt;http://shop.oreilly.com/product/0636920012269.do&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wait a minute, Doc</title>
      <link>http://sparkfabrik.github.io/2016/06/14/wait-a-minute-doc</link>
      <pubDate>Tue, 14 Jun 2016 11:02:30 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/06/14/wait-a-minute-doc</guid>
      <description>

&lt;p&gt;Only the brave can be web developers today.
I really think if you are a web developer, nothing can scare the crap out of you! Nothing but writing documentation for your code&amp;hellip;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s face it, we &lt;strong&gt;hate&lt;/strong&gt; writing docs! In fact developers came up with a lot of clever tools to automatize code documentation, and they work well and reliably to date.
But there are cases where you have to jot down a guide to first build, or a reference page with best practices. Odds are good you end up using a project wiki, or if you are less fortunate you are juggling through a bunch of never-to-be-found Google Documents.&lt;/p&gt;

&lt;p&gt;Well, look no further: here we have a recipe to soothe your pain!&lt;br /&gt;
It may not be a panacea but surely it will streamline the process of documentation maintenance and availability.&lt;/p&gt;

&lt;p&gt;Say welcome to Raneto!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;hey-doc-this-is-heavy:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Hey doc, this is heavy!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-thisisheavy-meme.jpg&#34; alt=&#34;This is heavy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start listing our pains with project documentation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Manage documentation requires a context switch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you live in a tmux-powered kickin-ass hyper-hipster hyphens-overloaded console environment the more annoying thing to do is switch to a browser, navigate to your tracker&amp;rsquo;s wiki, make your way to the right page and edit the stuff. It is discomfortable and a great excuse for procrastination.
This is in my opinion the first reason why documentation goes obsolete from day 1.&lt;/p&gt;

&lt;p&gt;Add problems like write permissions on knowledge-base tools, another approval workflow to manage, possible policies-hell, etc. and you&amp;rsquo;ll flip your table at the sole idea!&lt;/p&gt;

&lt;p&gt;Surely, having a more straighforward path from your working environment to your documentation helps you keep it up to date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Documentation is hard to evolve with your project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When your team is involved on a medium-to-long term project, you really need to keep track of changes. But changes don&amp;rsquo;t always happen in line.
Wild branching, forking and bisecting happens in your codebase as experimental feature get thrown in and out, or the codebase is updated to work on the next &lt;em&gt;&amp;lt;your technology of choice&amp;gt;&lt;/em&gt; release. This means documentation should ideally follow along with your codebase.&lt;/p&gt;

&lt;p&gt;For example, a three-years long project of ours was recently moved from an &amp;ldquo;old fashioned&amp;rdquo; PHP5 based environment to a shiny new docker-based, PHP7 one. The process took weeks and almost totally changed the way we perform builds, not to mention how local development environment works.
Maintaining two pages on a wiki, with almost the same title, and drop a note somewhere to explain which page to read is ugly as a single-headed monkey. It introduces throw-away information, generates confusion and is hard to read for both experienced teammates and newcomers.&lt;/p&gt;

&lt;p&gt;This leads to the next point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. When documentation is hard to find or unreliable, people stop reaching for it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Natural tendency towards the path of least resistence makes people want to &lt;del&gt;stre&lt;/del&gt; ping one another on Slack instead of searching for information in the docs, simply because it is perceived as quicker, easier and (this is bad) more reliable.
This in turn makes some people the SPOF for important information, which is never persisted anywhere and when it does, it&amp;rsquo;s left alone and quickly goes out of date.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we had a bunch of problems to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Streamline the process of writing and maintaining documentation by devs point of view&lt;/li&gt;
&lt;li&gt;Make documentation accessible, reliable and relevant to the project state&lt;/li&gt;
&lt;li&gt;Allow anybody to contribute to documentation&lt;/li&gt;
&lt;li&gt;Avoid &lt;em&gt;moar policies&lt;/em&gt; for contributions&lt;/li&gt;
&lt;li&gt;Be cool (it&amp;rsquo;s always important to be cool if you want to write an article on what you are doing) (or if you want to play metal :D )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now what?&lt;/p&gt;

&lt;h3 id=&#34;back-to-the-future:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Back to the future&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-gigawatts-meme.jpg&#34; alt=&#34;I got gigawatts&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And it happened.
A customer asked our CTO to write guidelines on how to ensure maximum performance on the project before committing new contributions.&lt;/p&gt;

&lt;p&gt;Now, if you ask a developer to write documentation you are making her a major disservice, but if you ask a CTO you&amp;rsquo;ll end up causing yourself permanent damage!
Paolo decided to avoid physical confrontation and went the simple way: he dropped a markdown file with instructions in the project repository, in a folder called &lt;code&gt;documentation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;He didn&amp;rsquo;t even thought about opening the wiki (which was covered in cobwebs anyway). He did what was natural and obvious to him. And we ended up with a file we could read, nicely formatted, on our Gitlab instance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey, not bad!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was already in search for an easy to maintain knowledge-base platform and I thought in 2016, when static site generator are all-the-rage and everybody drools on going down-to-metal, maybe someone would have had addressed the problem, building a simple markdown-powered knowledge based generator.&lt;/p&gt;

&lt;p&gt;And guess what?! &lt;a href=&#34;https://gilbert.pellegrom.me&#34;&gt;Someone&lt;/a&gt; &lt;a href=&#34;https://github.com/gilbitron/Ranet&#34;&gt;did&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A bit of research and I stumbled on &lt;a href=&#34;http://raneto.com&#34;&gt;Raneto&lt;/a&gt;, a node-based, markdown-powered knowledge base site generator. Not static, but still. :)&lt;/p&gt;

&lt;p&gt;Raneto actually has a lot of selling points that made me fall in love:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s easy to install and use.&lt;/li&gt;
&lt;li&gt;It has no database, or if you prefer, your flat markdown files are it&amp;rsquo;s database.&lt;/li&gt;
&lt;li&gt;It is fast and pretty lightweight, with the whole stack sucking around 65MB of RAM.&lt;/li&gt;
&lt;li&gt;It renders to a pleasant default template, which can be themed with &lt;a href=&#34;https://mustache.github.io&#34;&gt;Mustache&lt;/a&gt;, highlights your code, support GitHub-flavored MarkDown and is also responsive.&lt;/li&gt;
&lt;li&gt;It allows you to perform full text search in the doc.&lt;/li&gt;
&lt;li&gt;Its index and documentation navigation are directory&amp;amp;slug-driven: you don&amp;rsquo;t have to build a menu, just arrange your files in folders &lt;code&gt;to/reflect/doc-sections&lt;/code&gt; and name dirs and files &lt;code&gt;using-a-slug-to-make-them-readable&lt;/code&gt; and you&amp;rsquo;ll end up with human readable version of menu links and titles.&lt;/li&gt;
&lt;li&gt;The whole doc reads in 5 minutes. From a smartphone. On a crowded train. I did.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yay! Now our CTO documentation looks really cute, with unicorns, rainbows and all!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Going down-to-metal leapfrogged us to the future! Yay!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s like flying-skates cool! Almost&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;great-dock:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Great Dock!!!&lt;/h3&gt;

&lt;p&gt;OK, we got a great service to hadle our CTO-proof documentation.
But no &lt;del&gt;hipst&lt;/del&gt; modern CTO would ever accept another dependency in his stack.&lt;/p&gt;

&lt;p&gt;The idea here is to have a folder in your project repository to hold all the relevant documentation so that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anybody can contribute with the same policies they use for code (do you review MRs? Use git-flow? Commit directly on master? No, seriously&amp;hellip; don&amp;rsquo;t do this, even at home!)&lt;/li&gt;
&lt;li&gt;Different branches or forks can have different version of the documentation&lt;/li&gt;
&lt;li&gt;Navigating the source code from Gitlab/GitHub/Bitbucket/Whatever allows you to read the documentation files anyway (a nice addition)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We miss a way to make Raneto available in a snap!
The solution is obviously to dockerize the whole thing out. And manage the container with docker-compose for good measure, of course!&lt;/p&gt;

&lt;p&gt;So &lt;a href=&#34;https://hub.docker.com/r/sparkfabrik/docker-node-raneto&#34;&gt;I prepared a container&lt;/a&gt; which mounts the local folder in a volume and exposes the content via Raneto, on port 80 for easier access!
The documentation is pretty straightforward (eh! ^_^&amp;lsquo;) but if you want to play with it right now, follow these steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a folder structure like this:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p documentation/docs
mkdir -p documentation/files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first directory will hold your markdown files. The second one will be mounted to the public asset folder, so you can have images or attachments in your documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write some example doc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can drop the following in &lt;code&gt;documentation/docs/up-to-88.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a silly example page with **markdown** syntax!

_And here is an even more silly meme_
![88mph](files/silly-meme.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then put one of the silly memes on this page in &lt;code&gt;files&lt;/code&gt; directory (of course name it &lt;code&gt;silly-meme.png&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Done?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Launch Raneto in its container&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -p 80:80 -v &amp;lt;/full/path/to/your/content&amp;gt;:/srv/raneto/content -d sparkfabrik/raneto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and enjoy your documentation at &lt;a href=&#34;http://localhost:80&#34;&gt;http://localhost:80&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes! It is THAT simple! :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-wasfast-meme.jpg&#34; alt=&#34;Whew... this was fast&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;hey-you-get-your-damn-hands-off-it:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Hey, you! Get your damn hands off it!&lt;/h3&gt;

&lt;p&gt;But why, oh why would you want to launch a container by hand when you can do it with &lt;a href=&#34;https://docs.docker.com/compose&#34;&gt;docker-compose&lt;/a&gt;?&lt;br /&gt;
Actually there are a lot of potential reasons, but leave me my drama and follow along: to make your documentation quickly accessible in your project the best thing to do is to install &lt;a href=&#34;https://github.com/tonistiigi/dnsdock&#34;&gt;dnsdock&lt;/a&gt; (&lt;a href=&#34;http://blog.brunopaz.net/easy-discover-your-docker-containers-with-dnsdock/&#34;&gt;this guide&lt;/a&gt; may come in handy) and register a URL for your project documentation.&lt;/p&gt;

&lt;p&gt;You can either create a new &lt;code&gt;docker-compose.yml&lt;/code&gt; file in your project root with the following content, or add these lines to the one you have in place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;documentation:
  image: sparkfabrik/docker-node-raneto:0.9.0
  environment:
    - DNSDOCK_ALIAS=docs.whatever.localdomain.loc
  volumes:
    - ./documentation/docs:/srv/raneto/content
    - ./documentation/files:/srv/raneto/themes/default/public/files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once done, and given your file is in the same directory than your &lt;code&gt;documentation&lt;/code&gt; folder, just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to enjoy your documentation at &lt;a href=&#34;http://docs.whatever.localdomain.loc&#34;&gt;http://docs.whatever.localdomain.loc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-what-the-hell-is-a-gigawatt:cb7242210f870347cebbc9c2f1daff46&#34;&gt;What-what the hell is a gigawatt?&lt;/h3&gt;

&lt;p&gt;Want to go the easy way?
You can test the all of the above cloning this repo: &lt;a href=&#34;https://github.com/stickgrinder/spark-docker-raneto-demo&#34;&gt;https://github.com/stickgrinder/spark-docker-raneto-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/wamd-calculations-meme.jpg&#34; alt=&#34;You did almost nothing...&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Mind that you have to have dnsdock in place &lt;em&gt;OR&lt;/em&gt; create an entry in the hostfile to resolve &lt;code&gt;docs.demo.sparkfabrik.loc&lt;/code&gt; to the IP of the container started by docker-compose.&lt;/p&gt;

&lt;h3 id=&#34;give-me-a-milk-chocolate:cb7242210f870347cebbc9c2f1daff46&#34;&gt;Give me a milk&amp;hellip; Chocolate!&lt;/h3&gt;

&lt;p&gt;If you now feel like a real documentation badass, pat yourself a shoulder: &lt;strong&gt;you are!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This simple container still has a long way to go: for example public assets would be better served in a folder outside the default theme. Even better, it can support custom theme in the project folder.
But you surely have more clever ideas so please, find the container definition &lt;a href=&#34;https://github.com/sparkfabrik/docker-node-raneto&#34;&gt;here&lt;/a&gt;, fork it and adapt it to your needs and workflow!&lt;/p&gt;

&lt;p&gt;And don&amp;rsquo;t forget to send PRs in! :)&lt;/p&gt;

&lt;p&gt;Happy doc(k)ing everybody!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE - 20 July 2016&lt;/strong&gt;:&lt;br /&gt;
My colleague Stefano pointed me out to &lt;a href=&#34;https://thinkshout.com/blog/2016/07/the-hidden-power-of-documentation/?utm_source=The+Weekly+Drop&amp;amp;utm_medium=email&amp;amp;utm_campaign=The_Weekly_Drop_Issue_248_07_14_2016&#34;&gt;this great complementary article&lt;/a&gt; by Joe Komenda, who provided valuable insight on how to organize your docs so that they actually make a difference. In the article Joe also provide a couple of great markdown templates to start with.&lt;br /&gt;
I found them a perfect match for our Raneto container and they really helps kickstart great project documentation.&lt;br /&gt;
My advice is to have them in your project launch checklist right now! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown bag happy-hour, May 4th 2016</title>
      <link>http://sparkfabrik.github.io/2016/05/10/brown-bag-happy-hour-2016-05-04</link>
      <pubDate>Tue, 10 May 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/05/10/brown-bag-happy-hour-2016-05-04</guid>
      <description>

&lt;p&gt;News about Drupal, Backtrac Casestudy, Drupal Developer Days and PHP for this new appointment of BBH!&lt;/p&gt;

&lt;h1 id=&#34;weekly-news:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;Weekly News&lt;/h1&gt;

&lt;h3 id=&#34;a-new-design-system-for-drupal-org:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;A new design system for Drupal.org&lt;/h3&gt;

&lt;p&gt;A new visual system for Drupal.org is expected for this year.
The goal is &amp;ldquo;Update Drupal.org to reflect the flexibility, modernity, and community of Drupal itself&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;See all details at &lt;a href=&#34;https://www.drupal.org/drupalorg/blog/a-new-design-system&#34;&gt;drupal.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;drupal-developer-days-keynotes:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;Drupal Developer Days keynotes&lt;/h3&gt;

&lt;p&gt;Drupal Developer Days, the developer-oriented international event that offers opportunities for learning and actually using Drupal, comes to Italy for the very first time in 2016. It will be held in Milan, June 21-26.&lt;/p&gt;

&lt;p&gt;Annunced keynotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bojan Živanović - Making a Drupal shaped dent in the universe&lt;/li&gt;
&lt;li&gt;Alessia Rullo - Aesthetics of interaction: an update&lt;/li&gt;
&lt;li&gt;Jessica Rose - Automating Access to Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See all details at &lt;a href=&#34;http://milan2016.drupaldays.org/program/keynotes&#34;&gt;drupaldays.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;backtrac-casestudy:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;Backtrac Casestudy&lt;/h3&gt;

&lt;p&gt;BackTrac is visual regression testing tool, the case study explain a real life example, Drupal.org.&lt;/p&gt;

&lt;p&gt;See all detail at &lt;a href=&#34;https://backtrac.io/blog/case-study-drupalorg&#34;&gt;backtrac.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;php-nette:15e3b647be7581d1cad694f8e8bd1c67&#34;&gt;PHP, Nette&lt;/h3&gt;

&lt;p&gt;According to the survey result at &lt;a href=&#34;http;//http://www.sitepoint.com&#34;&gt;sitepoint&lt;/a&gt; SitePoint statistics , it ranked number 3 in both “at Work” and “in Personal Projects”, just tailing the two giants: Laravel and Symfony2.
Nette Framework is an Open Source framework for creating web applications in PHP&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full PHP 7 compatibility&lt;/li&gt;
&lt;li&gt;Revolutionary technology that eliminates security holes and their misuse, such as XSS, CSRF, session hijacking, session fixation, etc&lt;/li&gt;
&lt;li&gt;Tracy debug tools, which will help you discover all bugs in timely fashion.&lt;/li&gt;
&lt;li&gt;Thoughtful and pure object-oriented design using the new features in PHP 5, components and event driven modeling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See all detail at &lt;a href=&#34;https://nette.org&#34;&gt;nette.org&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;em&gt;BBH (Brown bag happy-hour)&lt;/em&gt; it&amp;rsquo;s a &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; regular activity where we share discoveries and techniques with each other and discuss the last two week tech and innovation world novelties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown bag happy-hour, April 19th 2016</title>
      <link>http://sparkfabrik.github.io/2016/04/19/brown-bag-happy-hour</link>
      <pubDate>Tue, 19 Apr 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/19/brown-bag-happy-hour</guid>
      <description>

&lt;p&gt;News about Drupal, Telegram and Youtube for this new appointment of BBH!&lt;/p&gt;

&lt;h1 id=&#34;weekly-news:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Weekly News&lt;/h1&gt;

&lt;p&gt;Drupal, Telegram API and YouTube for this new appointment of BBH. By Enrico Sato.&lt;/p&gt;

&lt;h3 id=&#34;drupal-8-1-0-is-now-available:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Drupal 8.1.0 is now available&lt;/h3&gt;

&lt;p&gt;The testing for the &lt;a href=&#34;https://www.drupal.org/drupal-8.1.0-rc1&#34;&gt;first release candidate&lt;/a&gt; is concluded and now the drupal community published the first minor release of Drupal 8.1.0 version.&lt;/p&gt;

&lt;p&gt;What is new?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Experimental UI for migrations from older Drupal versions;&lt;/li&gt;
&lt;li&gt;Integration with BigPipe for performance of site;&lt;/li&gt;
&lt;li&gt;CKEditor WYSIWYG spellchecking and language button;&lt;/li&gt;
&lt;li&gt;Rendered entities in Views fields;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See all details at &lt;a href=&#34;https://www.drupal.org/blog/drupal-8-1-0&#34;&gt;drupal.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update from 8.0.6 to 8.1.0 use the update procedure (it is the same as updating from 8.0.5 to 8.0.6). Drupal community recommends to test the update carefully before updating your production site.&lt;/p&gt;

&lt;h3 id=&#34;a-drupal-distribution-for-publishers-thunder:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;A drupal distribution for publishers: Thunder&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_thunder.jpg&#34; alt=&#34;Thunder distribution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Media group &lt;a href=&#34;http://www.hubert-burda-media.com/&#34;&gt;Huber Burda Media&lt;/a&gt; released its Drupal 8 distribution, &lt;a href=&#34;http://www.thunder.org/&#34;&gt;Thunder&lt;/a&gt;, that includes contrib and custom modules selected for publisher’s world. This distribution is born thanks to a strong collaboration between publishers and developers and the final product shows a particularly care to UX that soothes the publisher’s workflow.
And, last but not least, it is built on Drupal 8!&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://www.drupal.org/project/thunder&#34;&gt;download Thunder&lt;/a&gt; or &lt;a href=&#34;https://simplytest.me/project/thunder&#34;&gt;test it out&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;telegram-bot-api-2-0:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Telegram Bot API 2.0&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_telegram.jpg&#34; alt=&#34;Telegram Bot API 2.0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One year after the the first release of its Bot Platform, Telegram announces new tools for it: Bot Platform 2.0&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today we are giving bot developers a whole new dimension with Bots 2.0: inline keyboards, callback and URL buttons, location permissions and on-the-fly message editing. The new bots can also generate any type of content for you to share with friends, including documents, MP3s, videos, stickers, animations and contacts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Telegram have already released some Bot’s example to try out the new capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/music&#34;&gt;@music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/youtube&#34;&gt;@youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/foursquare&#34;&gt;@foursquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.me/sticker&#34;&gt;@sticker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(you must update your app to the last version).&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://core.telegram.org/bots/2-0-intro&#34;&gt;Documentation about Telegram Bot API 2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, if you are not a coder and you would like to test the potential of Telegram’s Bot, you can start with &lt;a href=&#34;http://chatfuel.com&#34;&gt;Chatfuel&lt;/a&gt; and the possible integration with &lt;a href=&#34;https://zapier.com/zapbook/chatfuel&#34;&gt;Zapier&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;youtube-introduces-360-degree-live-streaming-and-spatial-audio:7d67e1a9fe6dd17323871a367af8d8a3&#34;&gt;Youtube introduces 360-degree live streaming and spatial audio&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/DvouWzN1dRdQtjATPUAXVkH2zcxEQpPdKlnvsY7i6aTxIl8NbcpUAJncUukeTb4igklbRWrleCFksDDVojv1GN6AiZk4v_2opy8cGX-C7hO2c0dgTx52gUQBJ_hc_5GBEMKAbkpb&#34; alt=&#34;Youtube 360-degree live streaming&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the launch of support for 360 degrees videos, Youtube makes another step towards virtual reality: now its platform allows for streaming with 360 degree technology and spacial audio effects&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just as watching a concert in 360 degrees can give you an unmatched immersive experience, spatial audio allows you to listen along as you do in real life, where depth, distance and intensity all play a role.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Youtube works with companies like &lt;strong&gt;VideoStitch&lt;/strong&gt; and &lt;strong&gt;Two Big Ears&lt;/strong&gt; to make their software compatible with 360-degree live streams or spatial audio. 360-degree live streaming and spatial audio technologies are avaliable at all &lt;a href=&#34;https://www.youtube.com/yt/space/&#34;&gt;YouTube Space locations around the globe&lt;/a&gt;, for people who wants to try this experience.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;em&gt;BBH (Brown bag happy-hour)&lt;/em&gt; it&amp;rsquo;s a &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; regular activity where we share discoveries and techniques with each other and discuss the last two week tech and innovation world novelties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drush Make overwrites your custom .gitignore file</title>
      <link>http://sparkfabrik.github.io/2016/04/08/drush-make-gitignore</link>
      <pubDate>Fri, 08 Apr 2016 01:00:00 -0400</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/08/drush-make-gitignore</guid>
      <description>

&lt;h1 id=&#34;managing-a-customized-gitignore-file-across-drush-make-builds:a0167166354a1579d70789b020f359e4&#34;&gt;Managing a customized .gitignore file across drush make builds&lt;/h1&gt;

&lt;h2 id=&#34;the-problem:a0167166354a1579d70789b020f359e4&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/drush-ops/drush&#34;&gt;Drush&lt;/a&gt; 8&lt;/strong&gt; overwrites the .gitignore file after a successful makefile execution.&lt;/p&gt;

&lt;p&gt;This affects complex projects where multiple dependency sources are present, and where other reasons might require a significant override of the &lt;strong&gt;.gitignore&lt;/strong&gt; file provided by Drupal, which ends up diffed, causing &lt;code&gt;git status&lt;/code&gt; to produce an ugly output, until the committed .gitignore is restored.&lt;/p&gt;

&lt;h2 id=&#34;origin-of-the-problem:a0167166354a1579d70789b020f359e4&#34;&gt;Origin of the problem&lt;/h2&gt;

&lt;p&gt;In recent upgrades, the &lt;code&gt;--overwrite&lt;/code&gt; option has been added to Drush in order to force the overwrite of existing folders (the command docs don&amp;rsquo;t  mention files, althought some file reference is present in the code comments), while the default behavior is to &lt;em&gt;merge&lt;/em&gt;, which means keeping existing folder content. This option has only an impact on &lt;strong&gt;directories&lt;/strong&gt; inside the project&amp;rsquo;s root and doesn&amp;rsquo;t affect the files in the root.&lt;/p&gt;

&lt;h2 id=&#34;how-the-problem-was-investigated:a0167166354a1579d70789b020f359e4&#34;&gt;How the problem was investigated&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I created a couple of docker containers based on &lt;a href=&#34;https://hub.docker.com/r/sparkfabrik/docker-php-base-image/&#34;&gt;SparkFabrik base PHP image&lt;/a&gt; well suitable for PHP/Drupal development.&lt;/li&gt;
&lt;li&gt;In both containers, I replaced the default Drush version (8.0.5 installed with phar) so that I could debug and alter the code on the fly&lt;/li&gt;
&lt;li&gt;In a container I installed version 6.7.0 (downloading the &lt;a href=&#34;https://github.com/drush-ops/drush/releases/tag/6.7.0&#34;&gt;release tarball&lt;/a&gt;) in the other I installed the &amp;ldquo;source&amp;rdquo; version of Drush 8.0.5 (&lt;a href=&#34;http://docs.drush.org/en/master/install-alternative/&#34;&gt;via composer&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;I created a small repository containing a .gitignore slightly different than Drupal&amp;rsquo;s one, and a makefile with some dependencies&lt;/li&gt;
&lt;li&gt;Then I executed &lt;code&gt;drush make&lt;/code&gt; in both containers, with the &lt;code&gt;--debug&lt;/code&gt; option that enhance output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;execution-flow:a0167166354a1579d70789b020f359e4&#34;&gt;Execution flow&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;During makefile processing, files are downloaded in a temp directory and only at the end they are copied to the final destination by the function &lt;a href=&#34;https://github.com/drush-ops/drush/blob/8.0.5/commands/make/make.drush.inc#L739&#34;&gt;&lt;code&gt;make_move_build&lt;/code&gt;&lt;/a&gt;. The process is basically a recursive copy of the elements found in the root of the downloaded codebase.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_move_build&lt;/code&gt; is also responsible for reading the &lt;code&gt;--overwrite&lt;/code&gt; option and pass a consequent value to the function in charge of copying both files and directories: &lt;a href=&#34;https://github.com/drush-ops/drush/blob/8.0.5/includes/filesystem.inc#L215&#34;&gt;&lt;code&gt;drush_copy_dir&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Before calling &lt;code&gt;drush_copy_dir&lt;/code&gt;, &lt;code&gt;make_move_build&lt;/code&gt; loops through root-level items and treats directories differently (see &lt;a href=&#34;https://github.com/drush-ops/drush/commit/d10826132d72f8dabc10a396efe43319d4a5b316&#34;&gt;https://github.com/drush-ops/drush/commit/d10826132d72f8dabc10a396efe43319d4a5b316&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;drush_copy_dir&lt;/code&gt; the value passed when &lt;code&gt;--overwrite&lt;/code&gt; is set is only used to create a log entry (&lt;a href=&#34;https://github.com/drush-ops/drush/blob/6.7.0/includes/filesystem.inc#L224&#34;&gt;https://github.com/drush-ops/drush/blob/6.7.0/includes/filesystem.inc#L224&lt;/a&gt;), but not in order to avoid overwriting files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;workaround-and-solutions:a0167166354a1579d70789b020f359e4&#34;&gt;Workaround and solutions&lt;/h2&gt;

&lt;p&gt;As a workaround, we set the build system (we&amp;rsquo;re currently using &lt;a href=&#34;https://www.phing.info/&#34;&gt;Phing&lt;/a&gt;) to execute a &lt;code&gt;git checkout&lt;/code&gt; of the committed version of .gitignore.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;real&lt;/em&gt; solution might consist in applying the &lt;code&gt;--override&lt;/code&gt; option (or lack of) also for root-level files, but I doubt this was intended by drush contributors, until now. In the following links, you can read a handful of relevant issues, for reference.&lt;/p&gt;

&lt;h2 id=&#34;links:a0167166354a1579d70789b020f359e4&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;This was the issue that originated the change from the previous behavior: &lt;a href=&#34;https://github.com/drush-ops/drush/pull/1450&#34;&gt;https://github.com/drush-ops/drush/pull/1450&lt;/a&gt; (commit &lt;a href=&#34;https://github.com/drush-ops/drush/pull/1450/commits/d10826132d72f8dabc10a396efe43319d4a5b316&#34;&gt;https://github.com/drush-ops/drush/pull/1450/commits/d10826132d72f8dabc10a396efe43319d4a5b316&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Other issues discussing the same subject:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drush-ops/drush/issues/1468&#34;&gt;https://github.com/drush-ops/drush/issues/1468&lt;/a&gt; &amp;ldquo;drush make does not overwrite root core files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NuCivic/dkan/issues/824&#34;&gt;https://github.com/NuCivic/dkan/issues/824&lt;/a&gt; &amp;ldquo;Move dkan modules downloaded via drush make to their own folder&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drush-ops/drush/issues/1269&#34;&gt;https://github.com/drush-ops/drush/issues/1269&lt;/a&gt; &amp;ldquo;drush make &lt;code&gt;--overwrite&lt;/code&gt; should respect &lt;code&gt;--projects=&lt;/code&gt;?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Brown bag happy-hour, April 5th 2016</title>
      <link>http://sparkfabrik.github.io/2016/04/06/brown-bag-happy-hour</link>
      <pubDate>Wed, 06 Apr 2016 08:51:09 +0200</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/06/brown-bag-happy-hour</guid>
      <description>

&lt;p&gt;In the first BBH of spring 2016 Marcello Testi discussed about Drush Make related issues within Drush8, and Paolo Mainardi introduced the Hugo static site generator to the team in order to kickstart the &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; Tech Blog. We also talked a little about design thanks to our weekly news digest.&lt;/p&gt;

&lt;h1 id=&#34;weekly-news:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Weekly News&lt;/h1&gt;

&lt;p&gt;This week we discussed mainly design-related news, brought by Marcello Gorla.&lt;/p&gt;

&lt;h3 id=&#34;adobe-xd:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Adobe XD&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_adobexd.jpg&#34; alt=&#34;Adobe XD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Originally know as “Project Comet&amp;rdquo;, Adobe has released the preview of &lt;a href=&#34;http://blogs.adobe.com/creativecloud/introducing-adobe-experience-design-cc-preview/&#34;&gt;Adobe XD&lt;/a&gt;, it&amp;rsquo;s own tool intended for design and prototyping of user experience projects. The tool it&amp;rsquo;s an early stage release that still does not offer a full stack of features as we are used to with more advanced (and mature) softwares like Sketch or Adobe Photoshop, but there&amp;rsquo;s a &lt;a href=&#34;https://www.youtube.com/playlist?list=PLD8AMy73ZVxXvBQcZAnOcu57JCFxLi7bQ&#34;&gt;lot of stuff moving on&lt;/a&gt; and we think it&amp;rsquo;s worth trying.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/user-experience-design-1/first-impressions-with-adobe-experience-design-107904b5efbe#.25cvqr3ys&#34;&gt;Some opinions&lt;/a&gt; of course have been &lt;a href=&#34;http://techcrunch.com/2016/03/14/adobe-launches-experience-design-cc-a-new-tool-for-ux-designers/&#34;&gt;already popped out&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;frog-will-have-no-more-cco:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Frog will have no more CCO&lt;/h3&gt;

&lt;p&gt;After the departure of Hans Neubert, the international design firm &lt;a href=&#34;http://www.frogdesign.com/&#34;&gt;Frog&lt;/a&gt; recently decided &lt;a href=&#34;http://designmind.frogdesign.com/2016/03/evolving-creative-leadership-at-frog/&#34;&gt;not to replace it&amp;rsquo;s Chief Creative Officer with a new one&lt;/a&gt;, implementing a more agile structure with many Creative Officers around the world leading the single design teams. From a wider perspective, this event has an interesting impact.  A &lt;a href=&#34;http://www.fastcodesign.com/3058517/frog-will-have-no-more-chief-creative-officers&#34; title=&#34;Fast Co Design&#34;&gt;Fast Co Design&lt;/a&gt; article made a good point over this, trying to consider what is happening to the design consultancies and firms and to the field in general.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While design is more in demand than ever, the business of design consultancies has been in flux. Mega business consultants Accenture and IBM have each been making $100 million-plus bets on increasing their design fluency. Meanwhile, design firms ranging from Lunar to Ideo have reassessed their business strategies, and firms like Yves Behar&amp;rsquo;s Fuseproject have sold outright to foreign investors.
(Via &lt;a href=&#34;http://www.fastcodesign.com/3058517/frog-will-have-no-more-chief-creative-officers&#34; title=&#34;Fast Co Design&#34;&gt;Fast Co Design&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;olo-reached-founding-goal:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;OLO reached founding goal&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/2016_olo.jpg&#34; alt=&#34;Adobe XD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Italian Kickstarter project &lt;a href=&#34;https://www.kickstarter.com/projects/olo3d/olo-the-first-ever-smartphone-3d-printer&#34;&gt;Olo&lt;/a&gt;, a 3D printer suited for the smartphones screen, has reached the funding goal and is running fast towards more stellar ones. Promising very good print resolution at low costs, this 3D printer could be a step forward to unchain the potential of personal projects prototyping and experimentation, but also a new frontier to many other unexplored fields like the home-productions of games.&lt;/p&gt;

&lt;h3 id=&#34;bonus-track-trend-to-follow-conversational-interfaces:9c444aa2dfdea4e5244e9f58da10b482&#34;&gt;Bonus Track, trend to follow: conversational interfaces&lt;/h3&gt;

&lt;p&gt;Conversational Interfaces could be a good trend to follow, in our opinion. &lt;a href=&#34;http://www.fastcodesign.com/3058546/conversational-interfaces-explained?partner=rss&#34;&gt;Fast Co Design&lt;/a&gt; article on the topic points out how this pattern is quite interesting from a design point of view, because it elitminates a barrier, the UI, between the human and the machine languages. And this is particularly interesting considering the great hype that is surrounding the new wave of virtual reality interfaces, as the Oculus Rift, and the augmented reality in general.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So for most of computer history, we&amp;rsquo;ve communicated with computers essentially through Rosetta stones: We point at a symbol representing what we want a computer to do, and then it does it. For example, clicking an icon to open an app. With conversational interfaces, computers and humans can finally speak the same language without a Rosetta stone in between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On &lt;a href=&#34;https://medium.com/life-learning/the-future-of-cui-isn-t-conversational-fa3d9458c2b5&#34;&gt;Medium, Daniel Eckler&lt;/a&gt; wrote a very good article about how the design impacts this topic.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;em&gt;BBH (Brown bag happy-hour)&lt;/em&gt; it&amp;rsquo;s a &lt;a href=&#34;http://www.sparkfabrik.com/&#34; title=&#34;SparkFabrik&#34;&gt;SparkFabrik&lt;/a&gt; regular activity where we share discoveries and techniques with each other and discuss the last two week tech and innovation world novelties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A nerdy editorial experiment</title>
      <link>http://sparkfabrik.github.io/2016/04/05/a-nerdy-editorial-experiment</link>
      <pubDate>Tue, 05 Apr 2016 11:02:30 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/2016/04/05/a-nerdy-editorial-experiment</guid>
      <description>

&lt;p&gt;OK, I admit there&amp;rsquo;s nothing more &lt;a href=&#34;http://sparkfabrik.github.io/img/hipster.png&#34;&gt;hipster&lt;/a&gt; than describe themselves as &lt;a href=&#34;http://sparkfabrik.github.io/img/nerd.png&#34;&gt;nerds&lt;/a&gt;. But I had to draw your attention somehow.&lt;/p&gt;

&lt;h3 id=&#34;would-you-ever-say-there-is-still-room-to-evolve-the-concept-of-blogging:aa8805dea155bcaea150b85f7d77fe7a&#34;&gt;Would you ever say there is still room to evolve the concept of blogging?&lt;/h3&gt;

&lt;p&gt;We do! But let&amp;rsquo;s start from the beginning.&lt;br /&gt;
One year from the company inception the time has come to blog about the technology we love. But we&amp;rsquo;d like to do this in  our commitment to transparency and openness.&lt;/p&gt;

&lt;p&gt;We thought about it a bit and came to the conclusion that &lt;strong&gt;we want to treat our knowledge as we treat our code&lt;/strong&gt;.&lt;br /&gt;
We like to share and we like to contribute. We also leverage what others share and love to receive contributions! While there are established practices to contribute code in 2016, that&amp;rsquo;s not the case for knowledge.&lt;/p&gt;

&lt;p&gt;Comments are not the right way to collect contributions. They allow for arguments to rise, require effort to integrate (and devs are often too busy to go back on an old post) and they are sooo Web 2.0.&lt;/p&gt;

&lt;p&gt;The solution was there to see: we just need to raise our hipster-o-meter level a bit! ;)&lt;br /&gt;
So start from a static site generator, which is all the rage now uh? Middleman can do but&amp;hellip; a Ruby oldie? Really?! Nah! Let&amp;rsquo;s go with (wait for it&amp;hellip;) &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; and throw &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; in the soup! And of course pack it all up with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, which is just what the doctor ordered. And of course, all should be &lt;a href=&#34;https://github.com/sparkfabrik/sparkfabrik.github.com&#34;&gt;available on GitHub&lt;/a&gt;, for the world to enjoy.&lt;/p&gt;

&lt;p&gt;Spice it up with &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Common Attribution-ShareAlike 4.0 license&lt;/a&gt; for contents (hey, it&amp;rsquo;s safe for work and &amp;ldquo;Free Culture approved!&amp;rdquo;) and a &lt;a href=&#34;http://choosealicense.com/licenses/gpl-3.0/&#34;&gt;GNU GPLv3 License&lt;/a&gt; for the rest of the code, and you&amp;rsquo;re done!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hipster-o-meter is on fire! &amp;lowast;_&amp;lowast;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But most of all, now everybody can fork the project on GitHub and do one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify and use it for her own purpose. It&amp;rsquo;s like Christmas, only everyday.&lt;/li&gt;
&lt;li&gt;Fix or update a post which is imprecise, outdated or unclear and send us a PR. Because we like our blog to be relevant and if it helped you somehow, you can give back (spoiler: you can credit yourself!).&lt;/li&gt;
&lt;li&gt;Write a guest article you&amp;rsquo;d like to see published and become a guest writer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure, we don&amp;rsquo;t expect to become the next interweb sensation overnight, but we are excited to test this new approach to social blogging out.&lt;/p&gt;

&lt;h3 id=&#34;ok-but-what-will-we-blog-about:aa8805dea155bcaea150b85f7d77fe7a&#34;&gt;OK, but what will we blog about?&lt;/h3&gt;

&lt;p&gt;Actually, the sky is the limit. Our business as a company is currently heavily based on Drupal, so we&amp;rsquo;ll naturally blog about Drupal and PHP in general. But we can&amp;rsquo;t keep our mind off novelties, innovations and &lt;em&gt;&amp;lowast;cough cough&amp;lowast;&lt;/em&gt; buzz &lt;em&gt;&amp;lowast;cough&amp;lowast;&lt;/em&gt; words.&lt;/p&gt;

&lt;p&gt;Se expect to find here dumps of our &lt;a href=&#34;http://humanresources.about.com/od/trainingtransfer/g/brown-bag-lunch.htm&#34;&gt;brown bag happy-hours&lt;/a&gt;, bits of hard-earned wisdom, analysis of our achievements, micro-tutorial, gotchas, weird discoveries and tools reviews. And don&amp;rsquo;t forget your contributions! :)&lt;/p&gt;

&lt;p&gt;The rule of thumb is: &lt;strong&gt;it has to do with technology, not philosophy or other blurbs!&lt;/strong&gt;&lt;br /&gt;
And sure, this post is an exception :P &lt;em&gt;er&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We really hope you&amp;rsquo;ll enjoy reading this blog as we enjoy writing it. And you are encouraged to treat it as the piece of software it is!&lt;br /&gt;
See you around! ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Espruino on NodeMCU (step-by-step guide)</title>
      <link>http://sparkfabrik.github.io/1/01/01/espruino-nodemcu-step-by-step</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@sparkfabrik.com (Sparkfabrik)</author>
      <guid>http://sparkfabrik.github.io/1/01/01/espruino-nodemcu-step-by-step</guid>
      <description>

&lt;h2 id=&#34;introduction:181902d417846fa121f0e69f03cf2870&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This step-by-step guide is going to help you setting up and use &lt;a href=&#34;https://www.espruino.com/&#34; title=&#34;A firmware JavaScript Interpreter for Microcontrollers that runs on a variety of different chipsets&#34;&gt;Espruino&lt;/a&gt; on NodeMCU device.
&lt;a href=&#34;http://www.nodemcu.com/index_en.html&#34;&gt;NodeMCU&lt;/a&gt; is:
&amp;gt; An open-source firmware and development kit that helps you to prototype your IOT product within a few Lua script lines.&lt;/p&gt;

&lt;p&gt;We chosen the NodeMCU because it uses the ESP8266 chip which is one of the most cheap wifi module.&lt;/p&gt;

&lt;p&gt;We will first list all tools required to complete this tutorial, then we will flash the NodeMCU with the Espruino firmware (1v91) and at the end we will see how to connect to the wifi and push temp and humidity values over internet
using &lt;a href=&#34;https://dweet.io/, &amp;quot;Ridiculously simple messaging (and alerts&#34;&gt;dweet.io&lt;/a&gt; for the Internet of Things.&amp;ldquo;)&lt;/p&gt;

&lt;h2 id=&#34;buy-all-the-things:181902d417846fa121f0e69f03cf2870&#34;&gt;Buy all the things!&lt;/h2&gt;

&lt;p&gt;Everything for this tutorial has been bought on Amazon (fast shipment reason :) )
If you&amp;rsquo;re not in a hurry, you could have a look on Aliexpress.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.it/gp/product/B01GCK3J40/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;NodeMCU&lt;/a&gt;
&lt;a href=&#34;https://www.amazon.it/gp/product/B0154JQRPI/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;DHT11 sensor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;prepare-the-ground:181902d417846fa121f0e69f03cf2870&#34;&gt;Prepare the ground&lt;/h2&gt;

&lt;p&gt;First of all we have to prepare everything that is needed to perform the installation and usage of the espruino.
We would need a tool to copy the firmware into the device, we would need the firmware itself and a IDE that would facilitate us writing and uploading custom code.&lt;/p&gt;

&lt;h4 id=&#34;utility:181902d417846fa121f0e69f03cf2870&#34;&gt;Utility&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/themadinventor/esptool&#34;&gt;esptool.py&lt;/a&gt; is needed to flash the firmware into the device. Just follow the instruction on the github page.&lt;/p&gt;

&lt;p&gt;Given that python is already installed on your system, just type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install esptool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once installed, the executable is available on path (linux)&lt;code&gt;/usr/local/bin/esptool.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the Board described in this tutorial, CP2102 USB to UART driver is required. This driver is already part of the Linux core and maintained since version 3.x.
The driver for Mac OSX is available &lt;a href=&#34;https://www.silabs.com/Support%20Documents/Software/Mac_OSX_VCP_Driver.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;firmware:181902d417846fa121f0e69f03cf2870&#34;&gt;Firmware&lt;/h4&gt;

&lt;p&gt;Espruino firmware for ESP8266 can either be built from source-code that can be found on &lt;a href=&#34;https://github.com/tve/Espruino&#34;&gt;github&lt;/a&gt;
or simply install an already compiled one.
Updates on this firmware are tracked in a forum thread &lt;a href=&#34;http://forum.espruino.com/conversations/279176/&#34;&gt;http://forum.espruino.com/conversations/279176/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those not interested in discussions, just &lt;a href=&#34;https://www.espruino.com/Download&#34;&gt;download the latest firmware version&lt;/a&gt;
Make sure to use the firmware compatible with ESP8266.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-espruino-firmware:181902d417846fa121f0e69f03cf2870&#34;&gt;Flash the espruino firmware&lt;/h3&gt;

&lt;p&gt;To set NodeMCU to flash mode, keep pressed the &amp;ldquo;Flash&amp;rdquo; button while plugging in the device into the USB.&lt;/p&gt;

&lt;p&gt;Before we actually upload the new firmware, we have to make sure everything is clean. For that, we first erase the flash on the device by executing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;esptool.py --port /dev/ttyUSB0 erase_flash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that we can upload the Espruino firmware with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_freq 80m --flash_mode qio --flash_size 32m 0x0000 &amp;quot;boot_v1.6.bin&amp;quot; 0x1000 espruino_esp8266_user1.bin 0x3FC000 esp_init_data_default.bin 0x37E000 blank.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this command is explained within the README_flash.txt file contained into the downloaded firmware.
The command above might be different according to the ESP board you&amp;rsquo;re using. In my case I&amp;rsquo;m using an &lt;code&gt;esp-12&lt;/code&gt; board, so I can use up to 4MB of space.
For more info about flash and phisical addresses, please refer to &lt;a href=&#34;https://www.espruino.com/EspruinoESP8266&#34;&gt;https://www.espruino.com/EspruinoESP8266&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that bauds sets are different from those listed on the device.
You should find the same instruction in a README file within the downloaded firmware.&lt;/p&gt;

&lt;h3 id=&#34;espruino-ide:181902d417846fa121f0e69f03cf2870&#34;&gt;Espruino IDE&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/espruino-web-ide/bleoifhkdalbjfbobjackfdifdneehpo?hl=en&#34;&gt;Espruino Web-IDE plugin for Chrome&lt;/a&gt; is the easiest tool to use to upload custom code into the NodeMCU.
Once installed, go to settings &amp;gt; communications and update Baud rate to 115200.&lt;/p&gt;

&lt;p&gt;Now if you click on the connect button, you should be able to get access to the device.&lt;/p&gt;

&lt;h3 id=&#34;connect-to-wifi:181902d417846fa121f0e69f03cf2870&#34;&gt;Connect to wifi&lt;/h3&gt;

&lt;p&gt;To gain access to internet from your device, you should first setup the code for the connectivity. An example is the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var wifi = require(&amp;quot;Wifi&amp;quot;);
wifi.connect(&amp;quot;&amp;lt;YOUR-SSID-HERE&amp;gt;&amp;quot;, {password:&amp;quot;&amp;lt;YOUR-PASSWORD-HERE&amp;gt;&amp;quot;}, function(err){
 console.log(&amp;quot;connected? err=&amp;quot;, err, &amp;quot;info=&amp;quot;, wifi.getIP());
});
wifi.stopAP();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could, optionally, setup a hostname &lt;code&gt;wifi.setHostname(&amp;quot;Sparkfabrik-espruino&amp;quot;);&lt;/code&gt; to identify your device on your router.
Paste the code into the espruino IDE and click (while connected to nodeMCU) on &amp;ldquo;Send to Espruino&amp;rdquo;.
Once the wifi works as expected, add &lt;code&gt;wifi.save()&lt;/code&gt; to store the connection logic into the device. This operation will persist during device reset.&lt;/p&gt;

&lt;p&gt;Final code would be this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var wifi = require(&amp;quot;Wifi&amp;quot;);
wifi.setHostname(&amp;quot;Sparkfabrik-espruino&amp;quot;);
wifi.connect(&amp;quot;&amp;lt;YOUR-SSID-HERE&amp;gt;&amp;quot;, {password:&amp;quot;&amp;lt;YOUR-PASSWORD-HERE&amp;gt;&amp;quot;}, function(err){
 console.log(&amp;quot;connected? err=&amp;quot;, err, &amp;quot;info=&amp;quot;, wifi.getIP());
});
wifi.stopAP();
wifi.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once stored, you can wipe it out of the IDE and start building some useful code.&lt;/p&gt;

&lt;h3 id=&#34;examples:181902d417846fa121f0e69f03cf2870&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;temp-and-rh-data-over-internet:181902d417846fa121f0e69f03cf2870&#34;&gt;Temp and RH data over internet&lt;/h4&gt;

&lt;p&gt;NodeMCU GPIO label don&amp;rsquo;t match the actual GPIO pin. With Espruino, there is a NodeMCU class that allows an easy mapping between Espruino and NodeMCU pins.
Please refer to the &lt;a href=&#34;http://www.espruino.com/Reference#NodeMCU&#34;&gt;espruino reference&lt;/a&gt; for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sparkfabrik.github.io/posts/espruino-dht11-min.jpg&#34; alt=&#34;NodeMCU DHT11 connection&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On &lt;a href=&#34;https://www.espruino.com/IoT+Services&#34;&gt;&lt;em&gt;IoT Services&lt;/em&gt;&lt;/a&gt; section on Espruino.com there are few examples of how to use external services to push data.&lt;/p&gt;

&lt;p&gt;The following code is in charge of pushing data via POST method to dweet.io.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function putDweet(dweet_name, a, callback) {
  var data = &amp;quot;&amp;quot;;
  for (var n in a) {
    if (data.length) data+=&amp;quot;&amp;amp;&amp;quot;;
    data += encodeURIComponent(n)+&amp;quot;=&amp;quot;+encodeURIComponent(a[n]); 
  }
  var options = {
    host: &#39;dweet.io&#39;,
    port: &#39;80&#39;,
    path:&#39;/dweet/for/&#39;+dweet_name+&amp;quot;?&amp;quot;+data,
    method:&#39;POST&#39;
  };
  require(&amp;quot;http&amp;quot;).request(options, function(res)  {
    var d = &amp;quot;&amp;quot;;
    res.on(&#39;data&#39;, function(data) { d+=data; });
    res.on(&#39;close&#39;, function(data) {
      if (callback) callback(d);
    });
 }).end();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we know how to send data over internet, we simply have to read data from the sensor and push it on a service online.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;pin=NodeMCU.D2;
var dht11 = require(&amp;quot;DHT11&amp;quot;).connect(pin);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the data wire of the DHT11 sensor (yellow cable, usually) is connected to the pin 2 on the NodeMCU.
Required the DHT11 lib and connected it to the pin.&lt;/p&gt;

&lt;p&gt;Next we have to pull data at some interval (in my case, every minute) and to push them mover internet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var dht11_read_test = function() {
  dht11.read(
    function(a){
      console.log(&amp;quot;Temp is &amp;quot;+a.temp.toString()+ &amp;quot; and RH is &amp;quot;+a.rh.toString());
      var data = {
        temp: a.temp.toString(),
        rh:a.rh.toString()
      };
      putDweet(&amp;quot;sparkfabrik-espruino&amp;quot;, data, function(response) {
        console.log(response);
      });
     });
};
setInterval(dht11_read_test,60000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full script is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;pin=NodeMCU.D2;
var dht11 = require(&amp;quot;DHT11&amp;quot;).connect(pin);
var dht11_read_test = function() {
  dht11.read(
    function(a){
      console.log(&amp;quot;Temp is &amp;quot;+a.temp.toString()+ &amp;quot; and RH is &amp;quot;+a.rh.toString());
      var data = {
        temp: a.temp.toString(),
        rh:a.rh.toString()
      };
      putDweet(&amp;quot;sparkfabrik-espruino&amp;quot;, data, function(response) {
        console.log(response);
      });
     });
};
setInterval(dht11_read_test,60000);

function putDweet(dweet_name, a, callback) {
  var data = &amp;quot;&amp;quot;;
  for (var n in a) {
    if (data.length) data+=&amp;quot;&amp;amp;&amp;quot;;
    data += encodeURIComponent(n)+&amp;quot;=&amp;quot;+encodeURIComponent(a[n]); 
  }
  var options = {
    host: &#39;dweet.io&#39;,
    port: &#39;80&#39;,
    path:&#39;/dweet/for/&#39;+dweet_name+&amp;quot;?&amp;quot;+data,
    method:&#39;POST&#39;
  };
  require(&amp;quot;http&amp;quot;).request(options, function(res)  {
    var d = &amp;quot;&amp;quot;;
    res.on(&#39;data&#39;, function(data) { d+=data; });
    res.on(&#39;close&#39;, function(data) {
      if (callback) callback(d);
    });
 }).end();
}

save();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:181902d417846fa121f0e69f03cf2870&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s very easy to build an IoT device nowadays as hardware for prototyping is becoming very cheap.
NodeMCU is one of those &amp;ldquo;essential&amp;rdquo; play-board that is affordable and it is great for fast prototyping.
At the end, for IoT device, what would you expect? A bunch of GPIO and a internet connection.&lt;/p&gt;

&lt;p&gt;And what&amp;rsquo;s more cool for a web-developer to code not just software, but hardware as well with Javascript? :)
I wanted to give it a try and it was easy and funny to build this very basic example.
There is plenty of documentation and examples online. For now, the list of supported &lt;a href=&#34;https://www.espruino.com/Sensors&#34;&gt;sensors&lt;/a&gt; is limited,
but I&amp;rsquo;m pretty sure there are enough of them to get you started with it.&lt;/p&gt;

&lt;h3 id=&#34;useful-resources:181902d417846fa121f0e69f03cf2870&#34;&gt;Useful resources&lt;/h3&gt;

&lt;p&gt;Espruino info on ESP8266 chip: &lt;a href=&#34;http://www.espruino.com/EspruinoESP8266&#34;&gt;http://www.espruino.com/EspruinoESP8266&lt;/a&gt;
How to use espruino on ESP8266: &lt;a href=&#34;http://crufti.com/getting-started-with-espruino-on-esp8266/&#34;&gt;http://crufti.com/getting-started-with-espruino-on-esp8266/&lt;/a&gt;
ESP8266 flashing: &lt;a href=&#34;http://www.espruino.com/ESP8266_Flashing&#34;&gt;http://www.espruino.com/ESP8266_Flashing&lt;/a&gt;
Espruino JS reference: &lt;a href=&#34;http://www.espruino.com/Reference&#34;&gt;http://www.espruino.com/Reference&lt;/a&gt;
Espruino sensors: &lt;a href=&#34;https://www.espruino.com/Sensors&#34;&gt;https://www.espruino.com/Sensors&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>